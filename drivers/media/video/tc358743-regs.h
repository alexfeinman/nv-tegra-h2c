#pragma once

struct h2c_mode {
	int xres;
	int yres;
	//int resolution;
	//int hdmi_input;
	//int csi_output;
	//int progressive; //progressive or interlace?
	//__u32 frame_length;
};

struct h2c_32_reg {
    u32 addr;
    u32 value;
	u32 len;
};


#define H2C_MAX_RETRIES 3
#define H2C_TABLE_END 0xffff
#define H2C_TABLE_WAIT_MS 0xfffe
#define H2C_TABLE_REPEAT 0xfffd
#define H2C_REPEAT(a,b) (((a) << 12)|(b))


#define H2C_SYSTEM_CTRL_REG		((u16)0x0002)
#define H2C_VI_STATUS_REG		0x8521
#define H2C_VI_STATUS3_REG		0x8528
#define H2C_AUDIO_STATUS1_REG   0x8524
#define H2C_PACKET_INT_REG 		0x8504
#define H2C_SYS_INT_REG			0x8502
#define H2C_HDMI_INT1_REG		0x8501

#define CEC_OPCODE_NONE 0xFD
#define CEC_EOM_MASK BIT(0)
#define LOGIC_ADDR_REG_SIZE sizeof(u16)

#define MAX_BUFFER_SIZE 32

enum
{
	CEC_IOCTL_SET_ACKMASK = 0x5300,
	CEC_IOCTL_GET_ACKMASK,
};

enum H2C_INT_TYPE
{
	H2C_INT_SYS   = BIT(0),
	H2C_INT_CLK   =	BIT(1),
	H2C_INT_PKT   =	BIT(2),
	H2C_INT_CBIT  = BIT(3),
	H2C_INT_AUD   = BIT(4),
	H2C_INT_ERR   =	BIT(5),
	H2C_INT_HDCP  = BIT(6),
	H2C_INT_GBD   = BIT(7),
};

enum H2C_ISR_TYPE
{
	H2C_ISR_IR_D	= BIT(0),
	H2C_ISR_IR_E	= BIT(1),
	H2C_ISR_CEC_R	= BIT(2),
	H2C_ISR_CEC_T	= BIT(3),
	H2C_ISR_CEC_E	= BIT(4),
	H2C_ISR_SYS	= BIT(5),
	H2C_ISR_CSI	= BIT(8),
	H2C_ISR_HDMI	= BIT(9),
	H2C_ISR_AMUTE	= BIT(10),
};

enum H2C_SYSINT_TYPE
{
		H2C_SYSINT_DDC	= BIT(0),
		H2C_SYSINT_TMDS = BIT(1),
		H2C_SYSINT_HDCP = BIT(4),
};

enum H2C_PKTINT_TYPE
{
	H2C_PKTINT_ISRC 	= BIT(6),
	H2C_PKTINT_ISRC2	= BIT(7),
};

enum H2C_VI_SIGNAL_TYPE {
	H2C_VI_SIGNAL_VGA 		= 1,
	H2C_VI_SIGNAL_480I 		= 2,
	H2C_VI_SIGNAL_576I 		= 3,
	H2C_VI_SIGNAL_W480I 	= 4,
	H2C_VI_SIGNAL_W576I 	= 5,
	H2C_VI_SIGNAL_480P	 	= 6,
	H2C_VI_SIGNAL_576P	 	= 7,
	H2C_VI_SIGNAL_W480P 	= 8,
	H2C_VI_SIGNAL_W576P 	= 9,
	H2C_VI_SIGNAL_WW480P 	= 10,
	H2C_VI_SIGNAL_WW576P 	= 11,
	H2C_VI_SIGNAL_720P 		= 12,
	H2C_VI_SIGNAL_1035I 	= 13,
	H2C_VI_SIGNAL_1080I 	= 14,
	H2C_VI_SIGNAL_1080P 	= 15,
	H2C_VI_SIGNAL_SIZE
};

enum H2C_CEC_INT_TYPE
{
	H2C_CEC_RIEND	= BIT(0),
	H2C_CEC_RISTA	= BIT(1),
	H2C_CEC_RIMAX	= BIT(2),
	H2C_CEC_RIMIN	= BIT(3),
	H2C_CEC_RIACK	= BIT(4),
	H2C_CEC_RIOR	= BIT(5),
	H2C_CEC_RIWA	= BIT(6),
};

enum H2C_CEC_TX_INT_TYPE
{
	H2C_CEC_TIEND	= BIT(1),
	H2C_CEC_TIAL	= BIT(2),
	H2C_CEC_TIACK	= BIT(3),
	H2C_CEC_TIUR	= BIT(4),
};

#if 0
static struct h2c_32_reg yuv_720p_taec[];
static struct h2c_32_reg yuv_1080p_30_taec[];
static struct h2c_32_reg yuv_1080p_24_30[];

struct h2c_32_reg* h2c_video_mode_init_table[H2C_VI_SIGNAL_SIZE] = {
	[H2C_VI_SIGNAL_720P] = yuv_720p_taec,
	[H2C_VI_SIGNAL_1080P] = yuv_1080p_30_taec,
};
#endif

#define H2C_REG_1( addr, val ) \
{ addr, val, 1 }

#define H2C_REG_2( addr, val ) \
{ addr, val, 2 }

#define H2C_REG_4( addr, val ) \
{ addr, val, 4 }

static struct h2c_32_reg yuv_720p_4lanes[] = {
	H2C_REG_2(0x0004, 0x0000),
// reset H2C
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000 },
// Program CSI PLL
#ifdef COLORBAR_4LANES 
	H2C_REG_2(0x0020, 0x810b),
#else
	H2C_REG_2(0x0020, 0x4060),
#endif 
	H2C_REG_2(0x0022, 0x0213),
	H2C_REG_2(0x0006, 0x01c0),
	{H2C_TABLE_WAIT_MS, 1000 },
	H2C_REG_2(0x0004, 0x8c37),
	H2C_REG_2(0x0014, 0xffff),
	H2C_REG_2(0x7080, 0x0080),
// Program CSI related registers
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
//LineInitCnt = 0x1d00
	H2C_REG_2(0x0210, 0x2988),
//LPTimeCnt = 0x03
	H2C_REG_2(0x0214, 0x0005),
//TxClk_Zero[15:8] = 0x11, TxClk_PR[6:0] = 2
	H2C_REG_2(0x0218, 0x1d04),
//TClk_TrailCnt = 0x00
	H2C_REG_2(0x021c, 0x0002),
//[14:8] THS_ZEROCNT = 0x00, [6:0] THS_PREPARECNT = 0x03
	H2C_REG_2(0x0220, 0x0504),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0224, 0x4A00),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0228, 0x000a),
	H2C_REG_2(0x022c, 0x0004),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_2(0x0206, 0x0000),
	H2C_REG_2(0x0518, 0x0001),
	H2C_REG_2(0x051a, 0x0000),
#ifdef COLORBAR_4LANES 
	H2C_REG_2(0x0500, 0xbe86),
#else
	H2C_REG_2(0x0500, 0xb286),
#endif
	H2C_REG_2(0x0502, 0xa300),
	//H2C_REG_2(0x0016, 0x05FF),
	H2C_REG_2(0x000a, 0x0a00),
	H2C_REG_2(0x000c, 0x1e1e),
	H2C_REG_2(0x7082, 0x0040),
// Program HDMI related registers
// mask out all int except DDC
	H2C_REG_1(0x8512, 0xfc),
	H2C_REG_1(0x8513, 0xff),
	H2C_REG_1(0x8514, 0xff),
	H2C_REG_1(0x8515, 0xff),
	H2C_REG_1(0x8516, 0xff),
	H2C_REG_1(0x8517, 0xff),
	H2C_REG_1(0x8518, 0xff),
	H2C_REG_1(0x8519, 0xff),
	H2C_REG_1(0x851a, 0xff),
	H2C_REG_1(0x851b, 0xff),
	H2C_REG_1(0x851f, 0xff),
// 27MHz Clock
	H2C_REG_1(0x8531, 0x01),
	H2C_REG_1(0x8540, 0x8c),
	H2C_REG_1(0x8541, 0x0a),
	H2C_REG_1(0x8630, 0xb0),
	H2C_REG_1(0x8631, 0x1e),
	H2C_REG_1(0x8632, 0x04),
	H2C_REG_1(0x8670, 0x01),
	H2C_REG_1(0x8514, 0x00),
	H2C_REG_1(0x8516, 0x00),
// TSBJ suggestion
// HDCP KEY SET
	H2C_REG_1(0x85d1, 0x01),
//PHY Parameter set
	H2C_REG_1(0x8531, 0x03),
	H2C_REG_1(0x8532, 0x80),
	H2C_REG_1(0x8536, 0x40),
	H2C_REG_1(0x853f, 0x0a),
//SYSTEM
	H2C_REG_1(0x8543, 0x32),
// Hot Plug Enable
	H2C_REG_1(0x8544, 0x10),
	H2C_REG_1(0x8545, 0x31),
	H2C_REG_1(0x8546, 0x2d),
//EDID Mode
	H2C_REG_1(0x85c7, 0x01),
	H2C_REG_1(0x85cb, 0x01),
// Write to EDID RAM first block 0x80 byte
	H2C_REG_4(0x8c00, 0xffffff00),
	H2C_REG_4(0x8C04, 0x00ffffff),
	H2C_REG_4(0x8c08, 0x88886252),
	H2C_REG_4(0x8C0C, 0x88888800),
	H2C_REG_4(0x8c10, 0x0301151C),
	H2C_REG_4(0x8C14, 0x78000080),
	H2C_REG_4(0x8c18, 0xA3FFDA0A),
	H2C_REG_4(0x8C1C, 0x29A24A58),
	H2C_REG_4(0x8c20, 0x004B4917),
	H2C_REG_4(0x8C24, 0x01010000),
	H2C_REG_4(0x8c28, 0x01010101),
	H2C_REG_4(0x8C2C, 0x01010101),
	H2C_REG_4(0x8c30, 0x01010101),
	H2C_REG_4(0x8C34, 0x1d010101),
	H2C_REG_4(0x8c38, 0xD0517200),
	H2C_REG_4(0x8C3C, 0x286E201E),
	H2C_REG_4(0x8c40, 0x8EC40055),
	H2C_REG_4(0x8C44, 0x1E000021),
	H2C_REG_4(0x8c48, 0x8AD00A8C),
	H2C_REG_4(0x8C4C, 0x102DE020),
	H2C_REG_4(0x8c50, 0x00963E10),
	H2C_REG_4(0x8C54, 0x00218E13),
	H2C_REG_4(0x8c58, 0x00001E00),
	H2C_REG_4(0x8C5C, 0x5400FC00),
	H2C_REG_4(0x8c60, 0x6968736F),
	H2C_REG_4(0x8C64, 0x482D6162),
	H2C_REG_4(0x8c68, 0x200A4332),
	H2C_REG_4(0x8C6C, 0xFD000000),
	H2C_REG_4(0x8c70, 0x0F3D1700),
	H2C_REG_4(0x8C74, 0x0A00178C),
	H2C_REG_4(0x8c78, 0x20202020),
	H2C_REG_4(0x8C7C, 0xcb012020),
// Write to EDID RAM second block 0x80 byte
	H2C_REG_4(0x8c80, 0x74170302),
	H2C_REG_4(0x8C84, 0x03138447),
	H2C_REG_4(0x8c88, 0x01060702),
	H2C_REG_4(0x8C8C, 0x01070923),
	H2C_REG_4(0x8c90, 0x000C0366),
	H2C_REG_4(0x8C94, 0x8C800030),
	H2C_REG_4(0x8c98, 0x208AD00A),
	H2C_REG_4(0x8C9C, 0x10102DE0),
	H2C_REG_4(0x8ca0, 0xC400963E),
	H2C_REG_4(0x8CA4, 0x0000218E),
	H2C_REG_4(0x8ca8, 0xD00A8C18),
	H2C_REG_4(0x8CAC, 0x2DE0208A),
	H2C_REG_4(0x8cb0, 0x963E1010),
	H2C_REG_4(0x8CB4, 0x218E1300),
	H2C_REG_4(0x8cb8, 0x8C180000),
	H2C_REG_4(0x8CBC, 0x5114A00A),
	H2C_REG_4(0x8cc0, 0x260016F0),
	H2C_REG_4(0x8CC4, 0xC400437C),
	H2C_REG_4(0x8cc8, 0x0000218E),
	H2C_REG_4(0x8CCC, 0xA00A8C98),
	H2C_REG_4(0x8cd0, 0x16F05114),
	H2C_REG_4(0x8CD4, 0x437C2600),
	H2C_REG_4(0x8cd8, 0x218E1300),
	H2C_REG_4(0x8CDC, 0x00980000),
	H2C_REG_4(0x8ce0, 0x00000000),
	H2C_REG_4(0x8CE4, 0x00000000),
	H2C_REG_4(0x8ce8, 0x00000000),
	H2C_REG_4(0x8CEC, 0x00000000),
	H2C_REG_4(0x8cf0, 0x00000000),
	H2C_REG_4(0x8CF4, 0x00000000),
	H2C_REG_4(0x8cf8, 0x00000000),
	H2C_REG_4(0x8CFC, 0x2e000000),
// HDCP
	H2C_REG_1(0x85d1, 0x01),
	H2C_REG_1(0x8560, 0x24),
	H2C_REG_1(0x8563, 0x11),
	H2C_REG_1(0x8564, 0x0f),
//VIDEO Setting
	H2C_REG_1(0x8573, 0x81),
	H2C_REG_1(0x8571, 0x02),
//AUDIO SET
	H2C_REG_1(0x8600, 0x00),
	H2C_REG_1(0x8602, 0xf3),
	H2C_REG_1(0x8603, 0x02),
	H2C_REG_1(0x8604, 0x0c),
	H2C_REG_1(0x8606, 0x05),
	H2C_REG_1(0x8607, 0x00),
	H2C_REG_1(0x8620, 0x22),
	H2C_REG_1(0x8640, 0x01),
	H2C_REG_1(0x8641, 0x65),
	H2C_REG_1(0x8642, 0x07),
	H2C_REG_1(0x8652, 0x02),
	H2C_REG_1(0x8665, 0x10),
//Info Packet Extraction Operation
	H2C_REG_1(0x8709, 0xff),
	H2C_REG_1(0x870a, 0xff),
	H2C_REG_1(0x870b, 0x2c),
	H2C_REG_1(0x870c, 0x53),
	H2C_REG_1(0x870d, 0x01),
	H2C_REG_1(0x870e, 0x30),
//GBD Extraction Operation
	H2C_REG_1(0x9007, 0x10),
// HDMI Initialization Complete
	H2C_REG_1(0x854a, 0x01),
	H2C_REG_2(0x0004, 0x0cd7),
	{H2C_TABLE_WAIT_MS, 100 },

	{H2C_TABLE_END, 0},

};

static struct h2c_32_reg yuv_480p_4lanes[] = {
	H2C_REG_2(0x0004, 0x0000),
// reset H2C
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000 },
// Program CSI PLL
	H2C_REG_2(0x0020, 0x810b),
	H2C_REG_2(0x0022, 0x0213),
	H2C_REG_2(0x0006, 0x01c0),
	{H2C_TABLE_WAIT_MS, 1000 },
	H2C_REG_2(0x0004, 0x8c37),
	H2C_REG_2(0x0014, 0xffff),
	H2C_REG_2(0x7080, 0x0080),
// Program CSI related registers
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
//LineInitCnt = 0x1d00
	H2C_REG_2(0x0210, 0x2988),
//LPTimeCnt = 0x03
	H2C_REG_2(0x0214, 0x0005),
//TxClk_Zero[15:8] = 0x11, TxClk_PR[6:0] = 2
	H2C_REG_2(0x0218, 0x1d04),
//TClk_TrailCnt = 0x00
	H2C_REG_2(0x021c, 0x0002),
//[14:8] THS_ZEROCNT = 0x00, [6:0] THS_PREPARECNT = 0x03
	H2C_REG_2(0x0220, 0x0504),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0224, 0x4A00),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0228, 0x000a),
	H2C_REG_2(0x022c, 0x0004),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_2(0x0206, 0x0000),
	H2C_REG_2(0x0518, 0x0001),
	H2C_REG_2(0x051a, 0x0000),
#ifdef COLORBAR_4LANES
	H2C_REG_2(0x0500, 0xbe86),
#else
	H2C_REG_2(0x0500, 0xbe82),
#endif
	H2C_REG_2(0x0502, 0xa300),
	//H2C_REG_2(0x0016, 0x05FF),
	H2C_REG_2(0x000a, 0x0500),
	H2C_REG_2(0x000c, 0x1e1e),
	H2C_REG_2(0x7082, 0x0040),
// Program HDMI related registers
// mask out all int except DDC
	H2C_REG_1(0x8512, 0xfc),
	H2C_REG_1(0x8513, 0xff),
	H2C_REG_1(0x8514, 0xff),
	H2C_REG_1(0x8515, 0xff),
	H2C_REG_1(0x8516, 0xff),
	H2C_REG_1(0x8517, 0xff),
	H2C_REG_1(0x8518, 0xff),
	H2C_REG_1(0x8519, 0xff),
	H2C_REG_1(0x851a, 0xff),
	H2C_REG_1(0x851b, 0xff),
	H2C_REG_1(0x851f, 0xff),
// 27MHz Clock
	H2C_REG_1(0x8531, 0x01),
	H2C_REG_1(0x8540, 0x8c),
	H2C_REG_1(0x8541, 0x0a),
	H2C_REG_1(0x8630, 0xb0),
	H2C_REG_1(0x8631, 0x1e),
	H2C_REG_1(0x8632, 0x04),
	H2C_REG_1(0x8670, 0x01),
	H2C_REG_1(0x8514, 0x00),
	H2C_REG_1(0x8516, 0x00),
// TSBJ suggestion
// HDCP KEY SET
	H2C_REG_1(0x85d1, 0x01),
//PHY Parameter set
	H2C_REG_1(0x8531, 0x03),
	H2C_REG_1(0x8532, 0x80),
	H2C_REG_1(0x8536, 0x40),
	H2C_REG_1(0x853f, 0x0a),
//SYSTEM
	H2C_REG_1(0x8543, 0x32),
// Hot Plug Enable
	H2C_REG_1(0x8544, 0x10),
	H2C_REG_1(0x8545, 0x31),
	H2C_REG_1(0x8546, 0x2d),
//EDID Mode
	H2C_REG_1(0x85c7, 0x01),
	H2C_REG_1(0x85cb, 0x01),
// Write to EDID RAM first block 0x80 byte
	H2C_REG_4(0x8c00, 0xffffff00),
	H2C_REG_4(0x8C04, 0x00ffffff),
	H2C_REG_4(0x8c08, 0x88886252),
	H2C_REG_4(0x8C0C, 0x88888800),
	H2C_REG_4(0x8c10, 0x0301151C),
	H2C_REG_4(0x8C14, 0x78000080),
	H2C_REG_4(0x8c18, 0xA3FFDA0A),
	H2C_REG_4(0x8C1C, 0x29A24A58),
	H2C_REG_4(0x8c20, 0x004B4917),
	H2C_REG_4(0x8C24, 0x01010000),
	H2C_REG_4(0x8c28, 0x01010101),
	H2C_REG_4(0x8C2C, 0x01010101),
	H2C_REG_4(0x8c30, 0x01010101),
	H2C_REG_4(0x8C34, 0x1d010101),
	H2C_REG_4(0x8c38, 0xD0517200),
	H2C_REG_4(0x8C3C, 0x286E201E),
	H2C_REG_4(0x8c40, 0x8EC40055),
	H2C_REG_4(0x8C44, 0x1E000021),
	H2C_REG_4(0x8c48, 0x8AD00A8C),
	H2C_REG_4(0x8C4C, 0x102DE020),
	H2C_REG_4(0x8c50, 0x00963E10),
	H2C_REG_4(0x8C54, 0x00218E13),
	H2C_REG_4(0x8c58, 0x00001E00),
	H2C_REG_4(0x8C5C, 0x5400FC00),
	H2C_REG_4(0x8c60, 0x6968736F),
	H2C_REG_4(0x8C64, 0x482D6162),
	H2C_REG_4(0x8c68, 0x200A4332),
	H2C_REG_4(0x8C6C, 0xFD000000),
	H2C_REG_4(0x8c70, 0x0F3D1700),
	H2C_REG_4(0x8C74, 0x0A00178C),
	H2C_REG_4(0x8c78, 0x20202020),
	H2C_REG_4(0x8C7C, 0xcb012020),
// Write to EDID RAM second block 0x80 byte
	H2C_REG_4(0x8c80, 0x74170302),
	H2C_REG_4(0x8C84, 0x03138447),
	H2C_REG_4(0x8c88, 0x01060702),
	H2C_REG_4(0x8C8C, 0x01070923),
	H2C_REG_4(0x8c90, 0x000C0366),
	H2C_REG_4(0x8C94, 0x8C800030),
	H2C_REG_4(0x8c98, 0x208AD00A),
	H2C_REG_4(0x8C9C, 0x10102DE0),
	H2C_REG_4(0x8ca0, 0xC400963E),
	H2C_REG_4(0x8CA4, 0x0000218E),
	H2C_REG_4(0x8ca8, 0xD00A8C18),
	H2C_REG_4(0x8CAC, 0x2DE0208A),
	H2C_REG_4(0x8cb0, 0x963E1010),
	H2C_REG_4(0x8CB4, 0x218E1300),
	H2C_REG_4(0x8cb8, 0x8C180000),
	H2C_REG_4(0x8CBC, 0x5114A00A),
	H2C_REG_4(0x8cc0, 0x260016F0),
	H2C_REG_4(0x8CC4, 0xC400437C),
	H2C_REG_4(0x8cc8, 0x0000218E),
	H2C_REG_4(0x8CCC, 0xA00A8C98),
	H2C_REG_4(0x8cd0, 0x16F05114),
	H2C_REG_4(0x8CD4, 0x437C2600),
	H2C_REG_4(0x8cd8, 0x218E1300),
	H2C_REG_4(0x8CDC, 0x00980000),
	H2C_REG_4(0x8ce0, 0x00000000),
	H2C_REG_4(0x8CE4, 0x00000000),
	H2C_REG_4(0x8ce8, 0x00000000),
	H2C_REG_4(0x8CEC, 0x00000000),
	H2C_REG_4(0x8cf0, 0x00000000),
	H2C_REG_4(0x8CF4, 0x00000000),
	H2C_REG_4(0x8cf8, 0x00000000),
	H2C_REG_4(0x8CFC, 0x2e000000),
// HDCP
	H2C_REG_1(0x85d1, 0x01),
	H2C_REG_1(0x8560, 0x24),
	H2C_REG_1(0x8563, 0x11),
	H2C_REG_1(0x8564, 0x0f),
//VIDEO Setting
	H2C_REG_1(0x8573, 0x81),
	H2C_REG_1(0x8571, 0x02),
//AUDIO SET
	H2C_REG_1(0x8600, 0x00),
	H2C_REG_1(0x8602, 0xf3),
	H2C_REG_1(0x8603, 0x02),
	H2C_REG_1(0x8604, 0x0c),
	H2C_REG_1(0x8606, 0x05),
	H2C_REG_1(0x8607, 0x00),
	H2C_REG_1(0x8620, 0x22),
	H2C_REG_1(0x8640, 0x01),
	H2C_REG_1(0x8641, 0x65),
	H2C_REG_1(0x8642, 0x07),
	H2C_REG_1(0x8652, 0x02),
	H2C_REG_1(0x8665, 0x10),
//Info Packet Extraction Operation
	H2C_REG_1(0x8709, 0xff),
	H2C_REG_1(0x870a, 0xff),
	H2C_REG_1(0x870b, 0x2c),
	H2C_REG_1(0x870c, 0x53),
	H2C_REG_1(0x870d, 0x01),
	H2C_REG_1(0x870e, 0x30),
//GBD Extraction Operation
	H2C_REG_1(0x9007, 0x10),
// HDMI Initialization Complete
	H2C_REG_1(0x854a, 0x01),
	H2C_REG_2(0x0004, 0x0cd7),
	{H2C_TABLE_WAIT_MS, 100 },

	{H2C_TABLE_END, 0},

};

#ifdef COLORBAR
static struct h2c_32_reg yuv_colorbar_720p_taec[] = {

	H2C_REG_2(0x7080, 0x0000),
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 500},
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000},
	H2C_REG_2(0x0004, 0x0084),
	H2C_REG_2(0x0010, 0x001e),
	H2C_REG_2(0x0020, 0x811b),
	H2C_REG_2(0x0022, 0x0213),
	{H2C_TABLE_WAIT_MS, 1000},
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
	H2C_REG_2(0x0218, 0x0303),
	H2C_REG_2(0x0220, 0x1010),
	H2C_REG_2(0x0228, 0x0010),
	H2C_REG_2(0x0234, 0x001f),
	H2C_REG_2(0x0238, 0x0001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_4(0x0518, 0x00000001),
	H2C_REG_4(0x0500, 0xa300be82),
	H2C_REG_2(0x000a, 0x0a00),
	H2C_REG_2(0x7080, 0x0082),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7090, 0x02cf),
	H2C_REG_2(0x7092, 0x0580),
	H2C_REG_2(0x7080, 0x0083),

	{H2C_TABLE_END, 0},
};

static struct h2c_32_reg yuv_color_bar_1080p[] = {
	{ 0x7080, 0x00 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl
	{ 0x2, 0x0F }, //SYSCTL
	{ 0x3, 0x00 }, //SYSCTL
	{H2C_TABLE_WAIT_MS, 5 },
	{ 0x2, 0x00 }, //SYSCTL
	{ 0x3, 0x00 }, //SYSCTL
	{H2C_TABLE_WAIT_MS, 5 },
	{ 0x6, 0x00 }, //FIFOCtl
	{ 0x7, 0x00 }, //FIFOCtl
	{ 0x4, 0x84 }, //ConfCtl
	{ 0x5, 0x00 }, //ConfCtl
	{ 0x10, 0x1e }, //PKID3
	{ 0x11, 0x00 }, //PKID3

	//{0x0016, 0xff},
	//{0x0017, 0x03},

	// Program CSI Tx PLL
	{ 0x20, 0x10 }, //PLLCTL0
	{ 0x21, 0x71 }, //PLLCTL0
	{ 0x22, 0x13 }, //PLLCTL1
	{ 0x23, 0x02 }, //PLLCTL1
	// CSI Tx PHY  (32-bit Registers)
	{ 0x140, 0x00 }, //CLW_CNTRL
	{ 0x141, 0x00 }, //CLW_CNTRL
	{ 0x142, 0x00 }, //CLW_CNTRL
	{ 0x143, 0x00 }, //CLW_CNTRL
	{ 0x144, 0x00 }, //D0W_CNTRL
	{ 0x145, 0x00 }, //D0W_CNTRL
	{ 0x146, 0x00 }, //D0W_CNTRL
	{ 0x147, 0x00 }, //D0W_CNTRL
	{ 0x148, 0x00 }, //D1W_CNTRL
	{ 0x149, 0x00 }, //D1W_CNTRL
	{ 0x14A, 0x00 }, //D1W_CNTRL
	{ 0x14B, 0x00 }, //D1W_CNTRL
	{ 0x14C, 0x00 }, //D2W_CNTRL
	{ 0x14D, 0x00 }, //D2W_CNTRL
	{ 0x14E, 0x00 }, //D2W_CNTRL
	{ 0x14F, 0x00 }, //D2W_CNTRL
	{ 0x150, 0x00 }, //D3W_CNTRL
	{ 0x151, 0x00 }, //D3W_CNTRL
	{ 0x152, 0x00 }, //D3W_CNTRL
	{ 0x153, 0x00 }, //D3W_CNTRL
	// CSI Tx PPI  (32-bit Registers)
	#if 0
	{ 0x210, 0x00 }, //LineInitCnt
	{ 0x211, 0x19 }, //LineInitCnt
	{ 0x212, 0x00 }, //LineInitCnt
	{ 0x213, 0x00 }, //LineInitCnt
	{ 0x214, 0x03 }, //LPTimeCnt
	{ 0x215, 0x00 }, //LPTimeCnt
	{ 0x216, 0x00 }, //LPTimeCnt
	{ 0x217, 0x00 }, //LPTimeCnt
	{ 0x218, 0x02 }, //TClk_HeaderCnt
	{ 0x219, 0x10 }, //TClk_HeaderCnt
	{ 0x21A, 0x00 }, //TClk_HeaderCnt
	{ 0x21B, 0x00 }, //TClk_HeaderCnt
	{ 0x21C, 0x00 }, //TCLK_TRAILCNT
	{ 0x21D, 0x00 }, //TCLK_TRAILCNT
	{ 0x21E, 0x00 }, //TCLK_TRAILCNT
	{ 0x21F, 0x00 }, //TCLK_TRAILCNT
	{ 0x220, 0x02 }, //THS_HeaderCnt
	{ 0x221, 0x00 }, //THS_HeaderCnt
	{ 0x222, 0x00 }, //THS_HeaderCnt
	{ 0x223, 0x00 }, //THS_HeaderCnt
	{ 0x224, 0x00 }, //TWakeUp
	{ 0x225, 0x40 }, //TWakeUp
	{ 0x226, 0x00 }, //TWakeUp
	{ 0x227, 0x00 }, //TWakeUp
	{ 0x228, 0x07 }, //TxClkPostCtl
	{ 0x229, 0x00 }, //TxClkPostCtl
	{ 0x22A, 0x00 }, //TxClkPostCtl
	{ 0x22B, 0x00 }, //TxClkPostCtl
	{ 0x22C, 0x01 }, //THS_TRAILCNT
	{ 0x22D, 0x00 }, //THS_TRAILCNT
	{ 0x22E, 0x00 }, //THS_TRAILCNT
	{ 0x22F, 0x00 }, //THS_TRAILCNT
#else
#if 1
	H2C_REG_4(0x0210, 0x00001a00),
	H2C_REG_4(0x0214, 0x00000004),
	H2C_REG_4(0x0218, 0x00001c04),
	H2C_REG_4(0x021c, 0x00000001),
	H2C_REG_4(0x0220, 0x00000101),
	H2C_REG_4(0x0224, 0x00004200),
	H2C_REG_4(0x0228, 0x00000009),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
#else
	H2C_REG_4(0x0210, 0x00002100),
	H2C_REG_4(0x0214, 0x00000003),
	H2C_REG_4(0x0218, 0x00001304),
	H2C_REG_4(0x021c, 0x00000001),
	H2C_REG_4(0x0220, 0x00000304),
	H2C_REG_4(0x0224, 0x00004600),
	H2C_REG_4(0x0228, 0x00000007),
	H2C_REG_4(0x022c, 0x00000001),
	H2C_REG_4(0x0234, 0x00000007),
	H2C_REG_4(0x0238, 0x00000001),
#endif
#endif
	{ 0x234, 0x1f }, //VRegEn
	{ 0x235, 0x00 }, //VRegEn
	{ 0x236, 0x00 }, //VRegEn
	{ 0x237, 0x00 }, //VRegEn
	{ 0x238, 0x01 }, //TxContiCTL
	{ 0x239, 0x00 }, //TxContiCTL
	{ 0x23A, 0x00 }, //TxContiCTL
	{ 0x23B, 0x00 }, //TxContiCTL
	{ 0x204, 0x01 }, //STARTCNTRL
	{ 0x205, 0x00 }, //STARTCNTRL
	{ 0x206, 0x00 }, //STARTCNTRL
	{ 0x207, 0x00 }, //STARTCNTRL
	{ 0x518, 0x01 }, //CSI_START
	{ 0x519, 0x00 }, //CSI_START
	{ 0x51A, 0x00 }, //CSI_START
	{ 0x51B, 0x00 }, //CSI_START
	#ifdef COLORBAR_4LANES
	{ 0x500, 0x86 }, //CSI_CONFW
	#else
	{ 0x500, 0x82 }, //CSI_CONFW
	#endif
	{ 0x501, 0x80 }, //CSI_CONFW
	{ 0x502, 0x00 }, //CSI_CONFW
	{ 0x503, 0xA3 }, //CSI_CONFW
	// 640x480 colorbar
	{ 0xA, 0x00 }, //VWcnt
	{ 0xB, 0x0F }, //VWcnt
	{ 0x7080, 0x82 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl
	// 80 pixel of black
	// repeat the following register 80 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 240) },
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of blue
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of red
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of pink
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	// 80 pixel of green
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	// 80 pixel of light blue
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0xc0 }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0xc0 }, //DVBBreg
	// 80 pixel of yellow
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	// 80 pixel of white
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	/*
	// 80 pixel of dark blue
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 120) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x30 }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x30 }, //DVBBreg
	*/
	// 480 lines
	{ 0x7090, 0xef }, //DAVLCreg
	{ 0x7091, 0x03 }, //DAVLCreg
	{ 0x7092, 0x00 }, //DAWCreg
	{ 0x7093, 0x08 }, //DAWCreg
	{ 0x7094, 0x10 }, //DVBreg
	{ 0x7095, 0x00 }, //DVBreg
	{ 0x7080, 0x83 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl


   	{H2C_TABLE_END, 0x0},

};

static struct h2c_32_reg yuv_color_bar_720p[] = {
	{ 0x7080, 0x00 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl
	{ 0x2, 0x0F }, //SYSCTL
	{ 0x3, 0x00 }, //SYSCTL
	{H2C_TABLE_WAIT_MS, 5 },
	{ 0x2, 0x00 }, //SYSCTL
	{ 0x3, 0x00 }, //SYSCTL
	{H2C_TABLE_WAIT_MS, 5 },
	{ 0x6, 0x00 }, //FIFOCtl
	{ 0x7, 0x00 }, //FIFOCtl
	{ 0x4, 0x84 }, //ConfCtl
	{ 0x5, 0x00 }, //ConfCtl
	{ 0x10, 0x1e }, //PKID3
	{ 0x11, 0x00 }, //PKID3
	// Program CSI Tx PLL
	{ 0x20, 0x5C }, //PLLCTL0
	{ 0x21, 0x40 }, //PLLCTL0
	{ 0x22, 0x13 }, //PLLCTL1
	{ 0x23, 0x02 }, //PLLCTL1
	// CSI Tx PHY  (32-bit Registers)
	{ 0x140, 0x00 }, //CLW_CNTRL
	{ 0x141, 0x00 }, //CLW_CNTRL
	{ 0x142, 0x00 }, //CLW_CNTRL
	{ 0x143, 0x00 }, //CLW_CNTRL
	{ 0x144, 0x00 }, //D0W_CNTRL
	{ 0x145, 0x00 }, //D0W_CNTRL
	{ 0x146, 0x00 }, //D0W_CNTRL
	{ 0x147, 0x00 }, //D0W_CNTRL
	{ 0x148, 0x00 }, //D1W_CNTRL
	{ 0x149, 0x00 }, //D1W_CNTRL
	{ 0x14A, 0x00 }, //D1W_CNTRL
	{ 0x14B, 0x00 }, //D1W_CNTRL
	{ 0x14C, 0x01 }, //D2W_CNTRL
	{ 0x14D, 0x00 }, //D2W_CNTRL
	{ 0x14E, 0x00 }, //D2W_CNTRL
	{ 0x14F, 0x00 }, //D2W_CNTRL
	{ 0x150, 0x01 }, //D3W_CNTRL
	{ 0x151, 0x00 }, //D3W_CNTRL
	{ 0x152, 0x00 }, //D3W_CNTRL
	{ 0x153, 0x00 }, //D3W_CNTRL
	// CSI Tx PPI  (32-bit Registers)
	{ 0x210, 0x00 }, //LineInitCnt
	{ 0x211, 0x19 }, //LineInitCnt
	{ 0x212, 0x00 }, //LineInitCnt
	{ 0x213, 0x00 }, //LineInitCnt
	{ 0x214, 0x03 }, //LPTimeCnt
	{ 0x215, 0x00 }, //LPTimeCnt
	{ 0x216, 0x00 }, //LPTimeCnt
	{ 0x217, 0x00 }, //LPTimeCnt
	{ 0x218, 0x02 }, //TClk_HeaderCnt
	{ 0x219, 0x10 }, //TClk_HeaderCnt
	{ 0x21A, 0x00 }, //TClk_HeaderCnt
	{ 0x21B, 0x00 }, //TClk_HeaderCnt
	{ 0x21C, 0x00 }, //TCLK_TRAILCNT
	{ 0x21D, 0x00 }, //TCLK_TRAILCNT
	{ 0x21E, 0x00 }, //TCLK_TRAILCNT
	{ 0x21F, 0x00 }, //TCLK_TRAILCNT
	{ 0x220, 0x02 }, //THS_HeaderCnt
	{ 0x221, 0x00 }, //THS_HeaderCnt
	{ 0x222, 0x00 }, //THS_HeaderCnt
	{ 0x223, 0x00 }, //THS_HeaderCnt
	{ 0x224, 0x00 }, //TWakeUp
	{ 0x225, 0x40 }, //TWakeUp
	{ 0x226, 0x00 }, //TWakeUp
	{ 0x227, 0x00 }, //TWakeUp
	{ 0x228, 0x07 }, //TxClkPostCtl
	{ 0x229, 0x00 }, //TxClkPostCtl
	{ 0x22A, 0x00 }, //TxClkPostCtl
	{ 0x22B, 0x00 }, //TxClkPostCtl
	{ 0x22C, 0x01 }, //THS_TRAILCNT
	{ 0x22D, 0x00 }, //THS_TRAILCNT
	{ 0x22E, 0x00 }, //THS_TRAILCNT
	{ 0x22F, 0x00 }, //THS_TRAILCNT
	{ 0x234, 0x07 }, //VRegEn
	{ 0x235, 0x00 }, //VRegEn
	{ 0x236, 0x00 }, //VRegEn
	{ 0x237, 0x00 }, //VRegEn
	{ 0x238, 0x01 }, //TxContiCTL
	{ 0x239, 0x00 }, //TxContiCTL
	{ 0x23A, 0x00 }, //TxContiCTL
	{ 0x23B, 0x00 }, //TxContiCTL
	{ 0x204, 0x01 }, //STARTCNTRL
	{ 0x205, 0x00 }, //STARTCNTRL
	{ 0x206, 0x00 }, //STARTCNTRL
	{ 0x207, 0x00 }, //STARTCNTRL
	{ 0x518, 0x01 }, //CSI_START
	{ 0x519, 0x00 }, //CSI_START
	{ 0x51A, 0x00 }, //CSI_START
	{ 0x51B, 0x00 }, //CSI_START
	{ 0x500, 0x82 }, //CSI_CONFW
	{ 0x501, 0x80 }, //CSI_CONFW
	{ 0x502, 0x00 }, //CSI_CONFW
	{ 0x503, 0xA3 }, //CSI_CONFW
	// 640x480 colorbar
	{ 0xA, 0x00 }, //VWcnt
	{ 0xB, 0x0A }, //VWcnt
	{ 0x7080, 0x82 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl
	// 80 pixel of black
	// repeat the following register 80 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 128) },
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of blue
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of red
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x00 }, //DVBBreg
	// 80 pixel of pink
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	// 80 pixel of green
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0x7f }, //DVBBreg
	// 80 pixel of light blue
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0xc0 }, //DVBBreg
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0xc0 }, //DVBBreg
	// 80 pixel of yellow
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0x00 }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	{ 0x7000, 0xff }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	// 80 pixel of white
	// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(4, 64) },
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	{ 0x7000, 0x7f }, //DVBBreg
	{ 0x7001, 0xff }, //DVBBreg
	// 480 lines
	{ 0x7090, 0xCF }, //DAVLCreg
	{ 0x7091, 0x02 }, //DAVLCreg
	{ 0x7092, 0x80 }, //DAWCreg
	{ 0x7093, 0x05 }, //DAWCreg
	{ 0x7094, 0x83 }, //DVBreg
	{ 0x7095, 0x00 }, //DVBreg
	{ 0x7080, 0x83 }, //DbgCtl
	{ 0x7081, 0x00 }, //DbgCtl


   	{H2C_TABLE_END, 0x0},

};

#endif

// Set EDID, set up input signal detection
static struct h2c_32_reg chip_init[] = {
	{ 0x2, 0x0 }, //SYSCTL
	{ 0x3, 0xF }, //SYSCTL
		{H2C_TABLE_WAIT_MS, 5 },
	{ 0x2, 0x0 }, //SYSCTL
	{ 0x3, 0x0 }, //SYSCTL
		{H2C_TABLE_WAIT_MS, 5 },

	{ 0x4, 0xF7 }, //ConfCtl
	{ 0x5, 0x0C }, //ConfCtl

	// CEC sampling clock
	{ 0x28, 0x90 },
	{ 0x29, 0x01 },
	{ 0x2A, 0x90 },
	{ 0x2B, 0x01 },

	// HDMI PHY
	{ 0x8532, 0x80 }, //PHY CTL1
	{ 0x8536, 0x40 }, //PHY_BIAS
	{ 0x853F, 0x0A }, //PHY_CSQ
	// HDMI System
	{ 0x8543, 0x3c }, //DDC_CTL
	{ 0x8544, 0x10 }, //HPD_CTL
	{ 0x8545, 0x31 }, //ANA_CTL
	{ 0x8546, 0x2D }, //AVM_CTL



	// EDID
	{ 0x85C7, 0x01 }, //EDID_MODE
	{ 0x85CB, 0x01 }, //EDID_LEN
	// EDID Data
	H2C_REG_4(0x8c00, 0xffffff00),
	H2C_REG_4(0x8C04, 0x00ffffff),
	H2C_REG_4(0x8c08, 0x88886252),
	H2C_REG_4(0x8C0C, 0x00000000),
	H2C_REG_4(0x8c10, 0x0301151c),
	H2C_REG_4(0x8C14, 0x78000080),
	H2C_REG_4(0x8c18, 0xA3FFDA0A),
	H2C_REG_4(0x8C1C, 0x29A24A58),
	H2C_REG_4(0x8c20, 0x004B4917),
	H2C_REG_4(0x8C24, 0x01010000),
	H2C_REG_4(0x8c28, 0x01010101),
	H2C_REG_4(0x8C2C, 0x01010101),
	H2C_REG_4(0x8c30, 0x01010101),
	H2C_REG_4(0x8C34, 0x3a020101),
	H2C_REG_4(0x8c38, 0x38711880),
	H2C_REG_4(0x8C3C, 0x2c58402d),
	H2C_REG_4(0x8c40, 0x8EC40045),
	H2C_REG_4(0x8C44, 0x1E000021),
	H2C_REG_4(0x8c48, 0x72001d01),
	H2C_REG_4(0x8C4C, 0x201ed051),
	H2C_REG_4(0x8c50, 0x0055286e),
	H2C_REG_4(0x8C54, 0x00218Ec4),
	H2C_REG_4(0x8c58, 0x00001E00),
	H2C_REG_4(0x8C5C, 0x5400FC00),
	H2C_REG_4(0x8c60, 0x6968736F),
	H2C_REG_4(0x8C64, 0x482D6162),
	H2C_REG_4(0x8c68, 0x0a0A4332),
	H2C_REG_4(0x8C6C, 0xFD000000),
	H2C_REG_4(0x8c70, 0x0F3D1700),
	H2C_REG_4(0x8C74, 0x0A00178C),
	H2C_REG_4(0x8c78, 0x20202020),
	H2C_REG_4(0x8C7C, 0x26012020),
	H2C_REG_4(0x8c80, 0x74170302),
	H2C_REG_4(0x8C84, 0x03138447),
	H2C_REG_4(0x8c88, 0x01060702),
	H2C_REG_4(0x8C8C, 0x01040923),
	H2C_REG_4(0x8c90, 0x000C0366),
	H2C_REG_4(0x8C94, 0x8C800030),
	H2C_REG_4(0x8c98, 0x208AD00A),
	H2C_REG_4(0x8C9C, 0x10102DE0),
	H2C_REG_4(0x8ca0, 0xC400963E),
	H2C_REG_4(0x8CA4, 0x0000218E),
	H2C_REG_4(0x8ca8, 0xD00A8C18),
	H2C_REG_4(0x8CAC, 0x2DE0208A),
	H2C_REG_4(0x8cb0, 0x963E1010),
	H2C_REG_4(0x8CB4, 0x218E1300),
	H2C_REG_4(0x8cb8, 0x8C180000),
	H2C_REG_4(0x8CBC, 0x5114A00A),
	H2C_REG_4(0x8cc0, 0x260016F0),
	H2C_REG_4(0x8CC4, 0xC400437C),
	H2C_REG_4(0x8cc8, 0x0000218E),
	H2C_REG_4(0x8CCC, 0xA00A8C98),
	H2C_REG_4(0x8cd0, 0x16F05114),
	H2C_REG_4(0x8CD4, 0x437C2600),
	H2C_REG_4(0x8cd8, 0x218E1300),
	H2C_REG_4(0x8CDC, 0x00980000),
	H2C_REG_4(0x8ce0, 0x00000000),
	H2C_REG_4(0x8CE4, 0x00000000),
	H2C_REG_4(0x8ce8, 0x00000000),
	H2C_REG_4(0x8CEC, 0x00000000),
	H2C_REG_4(0x8cf0, 0x00000000),
	H2C_REG_4(0x8CF4, 0x00000000),
	H2C_REG_4(0x8cf8, 0x00000000),
	H2C_REG_4(0x8CFC, 0x31000000),
	// HDCP Setting
	{ 0x8560, 0x24 }, //HDCP_MODE

	H2C_REG_1(0x8531, 0x00), // PHY_CTL0 - 27 MHz, phy power manual
	H2C_REG_1(0x854a, 0x01), // PHY_CTL0 - 27 MHz, phy power manual

	{H2C_TABLE_END, 0},
};

static struct h2c_32_reg chip_int_init[] = {

	{ 0x0016, 0xff }, //IntMask
	{ 0x0017, 0xff }, //IntMask
	{ 0x0014, 0xff }, //IntStatus
	{ 0x0015, 0xff }, //IntStatus
	{ 0x0016, 0x33 }, //IntMask
	{ 0x0017, 0x05 }, //IntMask

	{H2C_TABLE_END, 0},
};

#ifdef COLORBAR
static struct h2c_32_reg yuv_color_bar_480p_4lanes[] = {
// Register Name
	H2C_REG_2(0x7080, 0x0000), //DbgCtl

	H2C_REG_2(0x2, 0x0F00), //SYSCTL
	{H2C_TABLE_WAIT_MS, 100 },

	H2C_REG_2(0x2, 0x0000), //SYSCTL
	{H2C_TABLE_WAIT_MS, 100 },

	H2C_REG_2(0x6, 0x0000), //FIFOCtl
	H2C_REG_2(0x4, 0x0084), //ConfCtl
	H2C_REG_2(0x10, 0x001e), //PKID3

//	H2C_REG_2(0x16, 0x03ff), //INT mask
	H2C_REG_2(0x14, 0xffff), //int clear

// Program CSI Tx PLL
	H2C_REG_2(0x20, 0x811B), //PLLCTL0
	H2C_REG_2(0x22, 0x0213), //PLLCTL1

// CSI Tx PHY  (32-bit Registers)
	H2C_REG_4(0x140, 0x00000000), //CLW_CNTRL
	H2C_REG_4(0x144, 0x00000000), //D0W_CNTRL
	H2C_REG_4(0x148, 0x00000000), //D1W_CNTRL
	H2C_REG_4(0x14C, 0x00000000), //D2W_CNTRL
	H2C_REG_4(0x150, 0x00000000), //D3W_CNTRL
// CSI Tx PPI  (32-bit Registers)
	H2C_REG_4(0x210, 0x00002988), //LineInitCnt
	H2C_REG_4(0x214, 0x00000005), //LPTimeCnt
	H2C_REG_4(0x218, 0x00001D04), //TClk_HeaderCnt
	H2C_REG_4(0x21C, 0x00000002), //TCLK_TRAILCNT
	H2C_REG_4(0x220, 0x00000504), //THS_HeaderCnt
	H2C_REG_4(0x224, 0x00004600), //TWakeUp
	H2C_REG_4(0x228, 0x0000000A), //TxClkPostCtl
	H2C_REG_4(0x22C, 0x00000004), //THS_TRAILCNT
	H2C_REG_4(0x234, 0x0000001f), //VRegEn
	H2C_REG_4(0x238, 0x00000001), //TxContiCTL
	H2C_REG_4(0x204, 0x00000001), //STARTCNTRL
	H2C_REG_4(0x518, 0x00000001), //CSI_START
	H2C_REG_4(0x500, 0xA3008086), //CSI_CONFW
// 640x480 colorbar
	H2C_REG_2(0xA, 0x0500), //VWcnt
	H2C_REG_2(0x7080, 0x0082), //DbgCtl
// 80 pixel of black
// repeat the following register 80 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(1, 80) },
	H2C_REG_2(0x7000, 0x007f), //DVBBreg
// 80 pixel of blue
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0x00ff), //DVBBreg
	H2C_REG_2(0x7000, 0x0000), //DVBBreg
// 80 pixel of red
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0x0000), //DVBBreg
	H2C_REG_2(0x7000, 0x00ff), //DVBBreg
// 80 pixel of pink
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0x7fff), //DVBBreg
	H2C_REG_2(0x7000, 0x7fff), //DVBBreg
// 80 pixel of green
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0x7f00), //DVBBreg
	H2C_REG_2(0x7000, 0x7f00), //DVBBreg
// 80 pixel of light blue
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0xc0ff), //DVBBreg
	H2C_REG_2(0x7000, 0xc000), //DVBBreg
// 80 pixel of yellow
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0xff00), //DVBBreg
	H2C_REG_2(0x7000, 0xffff), //DVBBreg
// 80 pixel of white
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 40) },
	H2C_REG_2(0x7000, 0xff7f), //DVBBreg
	H2C_REG_2(0x7000, 0xff7f), //DVBBreg
// 480 lines
	H2C_REG_2(0x7090, 0x01DF), //DAVLCreg
	H2C_REG_2(0x7092, 0x0898), //DAWCreg
	H2C_REG_2(0x7094, 0x0285), //DVBreg
	H2C_REG_2(0x7080, 0x0083), //DbgCtl

	{ H2C_TABLE_END, 0 },
};
#endif

#ifdef COLORBAR
static struct h2c_32_reg yuv_color_bar_720p_4lanes[] = {
//  this script  enable H2C internal video test to output 720p 4lane DSI based on 27MHz refclk
	H2C_REG_2(0x7080, 0x0000),
// reset H2C
// Assert Reset, [0] = 0: Exit Sleep, wait
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
// Release Reset, Exit Sleep
	H2C_REG_2(0x0002, 0x0000),

	{H2C_TABLE_WAIT_MS, 500 },

// Configuration Control Register : YPID2 parameter, I2C slave index increment
	H2C_REG_2(0x0004, 0x0084),
	H2C_REG_2(0x0010, 0x001e),

	//{0x0016, 0xff},
	//{0x0017, 0x03},

// Program CSI PLL
// pll_clk = RefClk * [(FBD + 1)/ (PRD + 1)] * [1 / (2^FRS)]
// [15:12]: PRD = 6, [8:0]:FBD = 0x40 = 64
	H2C_REG_2(0x0020, 0x8084),
// [11:10]: FRS = 0, [9:8]: LBWS = 2, [4]: Clock Enable = 1,  [1]: ResetB = 1, [0]: PLL En
	H2C_REG_2(0x0022, 0x0213),
// Program CSI related registers
// Clock Lane DPHY Control Register : CLW_LaneDisable = 0
	H2C_REG_4(0x0140, 0x00000000),
// data Lane 0 DPHY Control Register : D0W_LaneDisable = 0
	H2C_REG_4(0x0144, 0x00000000),
// data Lane 1 DPHY Control Register : D1W_LaneDisable = 0
	H2C_REG_4(0x0148, 0x00000000),
// data Lane 2 DPHY Control Register : D2W_LaneDisable = 0
	H2C_REG_4(0x014c, 0x00000000),
// data Lane 3 DPHY Control Register : D3W_LaneDisable = 0
	H2C_REG_4(0x0150, 0x00000000),
#if 0
	H2C_REG_2(0x0210, 0x1400),
	H2C_REG_2(0x0214, 0x0002),
//TxClk_Zero[15:8] = 3, TxClk_PR[6:0] = 3
	H2C_REG_2(0x0218, 0x0303),
	H2C_REG_2(0x021c, 0x0000),
//[14:8] THS_ZEROCNT = 0x10, [6:0] THS_PREPARECNT = 0x10
	H2C_REG_2(0x0220, 0x0002),
	H2C_REG_2(0x0224, 0x4A00),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0228, 0x0010),
	H2C_REG_2(0x022C, 0x0000),
//Enable Voltage Regulator for DSI (4 Data + Clk) Lanes
	H2C_REG_2(0x0234, 0x001f),
//Continuous clock
	H2C_REG_2(0x0238, 0x0001),
#else
	H2C_REG_4(0x0210, 0x00001a00),
	H2C_REG_4(0x0214, 0x00000004),
	H2C_REG_4(0x0218, 0x00001c04),
	H2C_REG_4(0x021c, 0x00000001),
	H2C_REG_4(0x0220, 0x00000303),
	H2C_REG_4(0x0224, 0x00004200),
	H2C_REG_4(0x0228, 0x00000009),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
#endif
//Start PPI
	H2C_REG_2(0x0204, 0x0001),
//Start CSI_Tx
	H2C_REG_4(0x0518, 0x00000001),
//CSI Command Queue : TxMd=1, NOL=3
	H2C_REG_4(0x0500, 0xa300be86),
// 1280x720 colorbar
// Video Data Word Count = 0xa00 = 2x1280
	H2C_REG_2(0x000a, 0x0a00),
// Debug Control register : Video Word Count Enable, Debug Video Buffer enable, Debug csitx mode disable
	H2C_REG_2(0x7080, 0x0082),
// 80 pixel of black
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
	H2C_REG_2(0x7000, 0x007f),
// 80 pixel of blue
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
// 80 pixel of red
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
	H2C_REG_2(0x7000, 0x0000),
	H2C_REG_2(0x7000, 0x00ff),
// 80 pixel of pink
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
	H2C_REG_2(0x7000, 0x7fff),
	H2C_REG_2(0x7000, 0x7ff0),
// 80 pixel of green
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
	H2C_REG_2(0x7000, 0x7f00),
// 80 pixel of light blue
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
	H2C_REG_2(0x7000, 0xc0ff),
	H2C_REG_2(0x7000, 0xc000),
// 80 pixel of yellow
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
	H2C_REG_2(0x7000, 0xff00),
	H2C_REG_2(0x7000, 0xffff),
// 80 pixel of white
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
	H2C_REG_2(0x7000, 0xff7f),
// 720 lines
// Debug Active Video Line Count = 720 (0xcf)
	H2C_REG_2(0x7090, 0x02cf),
// Debug Total Word Count = 2048 (0x800)
	H2C_REG_2(0x7092, 0x0580),
// Debug Control register : Video Word Count Enable, Debug Video Buffer enable, Debug csitx mode enable
	H2C_REG_2(0x7080, 0x0083),
	{H2C_TABLE_WAIT_MS, 10 },
	{H2C_TABLE_END, 0x0},
};
#endif

static struct h2c_32_reg yuv_1080p_24_30[] = {
//  this script initializes H2C to take 720p and output 4lane CSI 
	H2C_REG_2(0x0004, 0x0000),
// reset H2C
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000 },
// Program CSI PLL
	H2C_REG_2(0x0020, 0x4068),
	H2C_REG_2(0x0022, 0x0213),
	{H2C_TABLE_WAIT_MS, 1000 },
	H2C_REG_2(0x0004, 0x8c37),
	H2C_REG_2(0x0014, 0xffff),
	H2C_REG_2(0x7080, 0x0080),
// Program CSI related registers
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
	H2C_REG_4(0x0210, 0x00001c00),
	H2C_REG_4(0x0214, 0x00000002),
	H2C_REG_4(0x0218, 0x00001302),
	H2C_REG_4(0x021c, 0x00000000),
	H2C_REG_4(0x0220, 0x00000003),
	H2C_REG_4(0x0224, 0x00005000),
	H2C_REG_4(0x0228, 0x00000007),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_2(0x0206, 0x0000),
	H2C_REG_2(0x0518, 0x0001),
	H2C_REG_2(0x051a, 0x0000),
	H2C_REG_2(0x0500, 0xbe82),
	H2C_REG_2(0x0502, 0xa300),
	//H2C_REG_2(0x0016, 0x0000),
	H2C_REG_2(0x000a, 0x0f00),
	H2C_REG_2(0x0006, 0x0000),
	H2C_REG_2(0x000c, 0x3424),
	H2C_REG_2(0x7082, 0x0040),
// Program HDMI related registers
// mask out all int except DDC
	H2C_REG_1(0x8512, 0xff),
	H2C_REG_1(0x8513, 0xff),
	H2C_REG_1(0x8514, 0xff),
	H2C_REG_1(0x8515, 0xff),
	H2C_REG_1(0x8516, 0xff),
	H2C_REG_1(0x8517, 0xff),
	H2C_REG_1(0x8518, 0xff),
	H2C_REG_1(0x8519, 0xff),
	H2C_REG_1(0x851a, 0xff),
	H2C_REG_1(0x851b, 0xff),
	H2C_REG_1(0x851f, 0xff),
// 27MHz Clock
	H2C_REG_1(0x8531, 0x01),
	H2C_REG_1(0x8540, 0x8c),
	H2C_REG_1(0x8541, 0x0a),
	H2C_REG_1(0x8630, 0xb0),
	H2C_REG_1(0x8631, 0x1e),
	H2C_REG_1(0x8632, 0x04),
	H2C_REG_1(0x8670, 0x01),
	H2C_REG_1(0x8514, 0x00),
	H2C_REG_1(0x8516, 0x00),
// TSBJ suggestion
// HDCP KEY SET
	H2C_REG_1(0x85d1, 0x01),
//PHY Parameter set
	H2C_REG_1(0x8531, 0x03),
	H2C_REG_1(0x8532, 0x80),
	H2C_REG_1(0x8536, 0x40),
	H2C_REG_1(0x853f, 0x0a),
//SYSTEM
	H2C_REG_1(0x8543, 0x32),
// Hot Plug Enable
	H2C_REG_1(0x8544, 0x10),
	H2C_REG_1(0x8545, 0x31),
	H2C_REG_1(0x8546, 0x2d),
//EDID Mode
	H2C_REG_1(0x85c7, 0x01),
	H2C_REG_1(0x85cb, 0x01),
// Write to EDID RAM first block 0x80 byte            
#if 0
	{ 0x8C00, 0x00 },
	{ 0x8C01, 0xff },
	{ 0x8C02, 0xff },
	{ 0x8C03, 0xff },
	{ 0x8C04, 0xff },
	{ 0x8C05, 0xff },
	{ 0x8C06, 0xff },
	{ 0x8C07, 0x00 },
	{ 0x8C08, 0x4c },
	{ 0x8C09, 0x2d },
	{ 0x8C0A, 0x2e },
	{ 0x8C0B, 0x03 },
	{ 0x8C0C, 0x00 },
	{ 0x8C0D, 0x00 },
	{ 0x8C0E, 0x00 },
	{ 0x8C0F, 0x00 },
	{ 0x8C10, 0x19 },
	{ 0x8C11, 0x11 },
	{ 0x8C12, 0x01 },
	{ 0x8C13, 0x03 },
	{ 0x8C14, 0x80 },
	{ 0x8C15, 0x10 },
	{ 0x8C16, 0x09 },
	{ 0x8C17, 0x78 },
	{ 0x8C18, 0x0a },
	{ 0x8C19, 0xae },
	{ 0x8C1A, 0xa1 },
	{ 0x8C1B, 0xa6 },
	{ 0x8C1C, 0x54 },
	{ 0x8C1D, 0x4c },
	{ 0x8C1E, 0x99 },
	{ 0x8C1F, 0x26 },
	{ 0x8C20, 0x14 },
	{ 0x8C21, 0x50 },
	{ 0x8C22, 0x54 },
	{ 0x8C23, 0x20 },
	{ 0x8C24, 0x00 },
	{ 0x8C25, 0x00 },
	{ 0x8C26, 0x01 },
	{ 0x8C27, 0x01 },
	{ 0x8C28, 0x01 },
	{ 0x8C29, 0x01 },
	{ 0x8C2A, 0x01 },
	{ 0x8C2B, 0x01 },
	{ 0x8C2C, 0x01 },
	{ 0x8C2D, 0x01 },
	{ 0x8C2E, 0x01 },
	{ 0x8C2F, 0x01 },
	{ 0x8C30, 0x01 },
	{ 0x8C31, 0x01 },
	{ 0x8C32, 0x01 },
	{ 0x8C33, 0x01 },
	{ 0x8C34, 0x01 },
	{ 0x8C35, 0x01 },
	{ 0x8C36, 0x02 },
	{ 0x8C37, 0x3a },
	{ 0x8C38, 0x80 },
	{ 0x8C39, 0x18 },
	{ 0x8C3A, 0x71 },
	{ 0x8C3B, 0x38 },
	{ 0x8C3C, 0x2d },
	{ 0x8C3D, 0x40 },
	{ 0x8C3E, 0x58 },
	{ 0x8C3F, 0x2c },
	{ 0x8C40, 0x45 },
	{ 0x8C41, 0x00 },
	{ 0x8C42, 0xa0 },
	{ 0x8C43, 0x5a },
	{ 0x8C44, 0x00 },
	{ 0x8C45, 0x00 },
	{ 0x8C46, 0x00 },
	{ 0x8C47, 0x1e },
	{ 0x8C48, 0x01 },
	{ 0x8C49, 0x1d },
	{ 0x8C4A, 0x80 },
	{ 0x8C4B, 0x18 },
	{ 0x8C4C, 0x71 },
	{ 0x8C4D, 0x1c },
	{ 0x8C4E, 0x16 },
	{ 0x8C4F, 0x20 },
	{ 0x8C50, 0x58 },
	{ 0x8C51, 0x2c },
	{ 0x8C52, 0x25 },
	{ 0x8C53, 0x00 },
	{ 0x8C54, 0xa0 },
	{ 0x8C55, 0x5a },
	{ 0x8C56, 0x00 },
	{ 0x8C57, 0x00 },
	{ 0x8C58, 0x00 },
	{ 0x8C59, 0x9e },
	{ 0x8C5A, 0x00 },
	{ 0x8C5B, 0x00 },
	{ 0x8C5C, 0x00 },
	{ 0x8C5D, 0xfc },
	{ 0x8C5E, 0x00 },
	{ 0x8C5F, 0x53 },
	{ 0x8C60, 0x41 },
	{ 0x8C61, 0x4d },
	{ 0x8C62, 0x53 },
	{ 0x8C63, 0x55 },
	{ 0x8C64, 0x4e },
	{ 0x8C65, 0x47 },
	{ 0x8C66, 0x0a },
	{ 0x8C67, 0x20 },
	{ 0x8C68, 0x20 },
	{ 0x8C69, 0x20 },
	{ 0x8C6A, 0x20 },
	{ 0x8C6B, 0x20 },
	{ 0x8C6C, 0x00 },
	{ 0x8C6D, 0x00 },
	{ 0x8C6E, 0x00 },
	{ 0x8C6F, 0xfd },
	{ 0x8C70, 0x00 },
	{ 0x8C71, 0x3b },
	{ 0x8C72, 0x3d },
	{ 0x8C73, 0x1e },
	{ 0x8C74, 0x44 },
	{ 0x8C75, 0x17 },
	{ 0x8C76, 0x00 },
	{ 0x8C77, 0x0a },
	{ 0x8C78, 0x20 },
	{ 0x8C79, 0x20 },
	{ 0x8C7A, 0x20 },
	{ 0x8C7B, 0x20 },
	{ 0x8C7C, 0x20 },
	{ 0x8C7D, 0x20 },
	{ 0x8C7E, 0x01 },
	{ 0x8C7F, 0xd5 },
	{ 0x8C80, 0x02 },
	{ 0x8C81, 0x03 },
	{ 0x8C82, 0x22 },
	{ 0x8C83, 0x71 },
	{ 0x8C84, 0x46 },
	{ 0x8C85, 0x90 },
	{ 0x8C86, 0x05 },
	{ 0x8C87, 0x04 },
	{ 0x8C88, 0x03 },
	{ 0x8C89, 0x20 },
	{ 0x8C8A, 0x22 },
	{ 0x8C8B, 0x23 },
	{ 0x8C8C, 0x09 },
	{ 0x8C8D, 0x07 },
	{ 0x8C8E, 0x07 },
	{ 0x8C8F, 0x83 },
	{ 0x8C90, 0x01 },
	{ 0x8C91, 0x00 },
	{ 0x8C92, 0x00 },
	{ 0x8C93, 0xe2 },
	{ 0x8C94, 0x00 },
	{ 0x8C95, 0x0f },
	{ 0x8C96, 0xe3 },
	{ 0x8C97, 0x05 },
	{ 0x8C98, 0x03 },
	{ 0x8C99, 0x01 },
	{ 0x8C9A, 0x67 },
	{ 0x8C9B, 0x03 },
	{ 0x8C9C, 0x0c },
	{ 0x8C9D, 0x00 },
	{ 0x8C9E, 0x20 },
	{ 0x8C9F, 0x00 },
	{ 0x8CA0, 0xb8 },
	{ 0x8CA1, 0x2d },
	{ 0x8CA2, 0x01 },
	{ 0x8CA3, 0x1d },
	{ 0x8CA4, 0x00 },
	{ 0x8CA5, 0x72 },
	{ 0x8CA6, 0x51 },
	{ 0x8CA7, 0xd0 },
	{ 0x8CA8, 0x1e },
	{ 0x8CA9, 0x20 },
	{ 0x8CAA, 0x6e },
	{ 0x8CAB, 0x28 },
	{ 0x8CAC, 0x55 },
	{ 0x8CAD, 0x00 },
	{ 0x8CAE, 0xa0 },
	{ 0x8CAF, 0x5a },
	{ 0x8CB0, 0x00 },
	{ 0x8CB1, 0x00 },
	{ 0x8CB2, 0x00 },
	{ 0x8CB3, 0x1e },
	{ 0x8CB4, 0x8c },
	{ 0x8CB5, 0x0a },
	{ 0x8CB6, 0xd0 },
	{ 0x8CB7, 0x8a },
	{ 0x8CB8, 0x20 },
	{ 0x8CB9, 0xe0 },
	{ 0x8CBA, 0x2d },
	{ 0x8CBB, 0x10 },
	{ 0x8CBC, 0x10 },
	{ 0x8CBD, 0x3e },
	{ 0x8CBE, 0x96 },
	{ 0x8CBF, 0x00 },
	{ 0x8CC0, 0xa0 },
	{ 0x8CC1, 0x5a },
	{ 0x8CC2, 0x00 },
	{ 0x8CC3, 0x00 },
	{ 0x8CC4, 0x00 },
	{ 0x8CC5, 0x18 },
	{ 0x8CC6, 0x00 },
	{ 0x8CC7, 0x00 },
	{ 0x8CC8, 0x00 },
	{ 0x8CC9, 0x00 },
	{ 0x8CCA, 0x00 },
	{ 0x8CCB, 0x00 },
	{ 0x8CCC, 0x00 },
	{ 0x8CCD, 0x00 },
	{ 0x8CCE, 0x00 },
	{ 0x8CCF, 0x00 },
	{ 0x8CD0, 0x00 },
	{ 0x8CD1, 0x00 },
	{ 0x8CD2, 0x00 },
	{ 0x8CD3, 0x00 },
	{ 0x8CD4, 0x00 },
	{ 0x8CD5, 0x00 },
	{ 0x8CD6, 0x00 },
	{ 0x8CD7, 0x00 },
	{ 0x8CD8, 0x00 },
	{ 0x8CD9, 0x00 },
	{ 0x8CDA, 0x00 },
	{ 0x8CDB, 0x00 },
	{ 0x8CDC, 0x00 },
	{ 0x8CDD, 0x00 },
	{ 0x8CDE, 0x00 },
	{ 0x8CDF, 0x00 },
	{ 0x8CE0, 0x00 },
	{ 0x8CE1, 0x00 },
	{ 0x8CE2, 0x00 },
	{ 0x8CE3, 0x00 },
	{ 0x8CE4, 0x00 },
	{ 0x8CE5, 0x00 },
	{ 0x8CE6, 0x00 },
	{ 0x8CE7, 0x00 },
	{ 0x8CE8, 0x00 },
	{ 0x8CE9, 0x00 },
	{ 0x8CEA, 0x00 },
	{ 0x8CEB, 0x00 },
	{ 0x8CEC, 0x00 },
	{ 0x8CED, 0x00 },
	{ 0x8CEE, 0x00 },
	{ 0x8CEF, 0x00 },
	{ 0x8CF0, 0x00 },
	{ 0x8CF1, 0x00 },
	{ 0x8CF2, 0x00 },
	{ 0x8CF3, 0x00 },
	{ 0x8CF4, 0x00 },
	{ 0x8CF5, 0x00 },
	{ 0x8CF6, 0x00 },
	{ 0x8CF7, 0x00 },
	{ 0x8CF8, 0x00 },
	{ 0x8CF9, 0x00 },
	{ 0x8CFA, 0x00 },
	{ 0x8CFB, 0x00 },
	{ 0x8CFC, 0x00 },
	{ 0x8CFD, 0x00 },
	{ 0x8CFE, 0x00 },
	{ 0x8CFF, 0x19 },
#else
{ 0x8C00, 0x00 },
{ 0x8C01, 0xFF },
{ 0x8C02, 0xFF },
{ 0x8C03, 0xFF },
{ 0x8C04, 0xFF },
{ 0x8C05, 0xFF },
{ 0x8C06, 0xFF },
{ 0x8C07, 0x00 },
{ 0x8C08, 0x4C },
{ 0x8C09, 0x2D },
{ 0x8C0A, 0x2E },
{ 0x8C0B, 0x03 },
{ 0x8C0C, 0x00 },
{ 0x8C0D, 0x00 },
{ 0x8C0E, 0x00 },
{ 0x8C0F, 0x00 },
{ 0x8C10, 0x19 },
{ 0x8C11, 0x11 },
{ 0x8C12, 0x01 },
{ 0x8C13, 0x03 },
{ 0x8C14, 0x80 },
{ 0x8C15, 0x10 },
{ 0x8C16, 0x09 },
{ 0x8C17, 0x78 },
{ 0x8C18, 0x0A },
{ 0x8C19, 0xAE },
{ 0x8C1A, 0xA1 },
{ 0x8C1B, 0xA6 },
{ 0x8C1C, 0x54 },
{ 0x8C1D, 0x4C },
{ 0x8C1E, 0x99 },
{ 0x8C1F, 0x26 },
{ 0x8C20, 0x14 },
{ 0x8C21, 0x50 },
{ 0x8C22, 0x54 },
{ 0x8C23, 0x20 },
{ 0x8C24, 0x00 },
{ 0x8C25, 0x00 },
{ 0x8C26, 0x01 },
{ 0x8C27, 0x01 },
{ 0x8C28, 0x01 },
{ 0x8C29, 0x01 },
{ 0x8C2A, 0x01 },
{ 0x8C2B, 0x01 },
{ 0x8C2C, 0x01 },
{ 0x8C2D, 0x01 },
{ 0x8C2E, 0x01 },
{ 0x8C2F, 0x01 },
{ 0x8C30, 0x01 },
{ 0x8C31, 0x01 },
{ 0x8C32, 0x01 },
{ 0x8C33, 0x01 },
{ 0x8C34, 0x01 },
{ 0x8C35, 0x01 },
{ 0x8C36, 0x01 },
{ 0x8C37, 0x1D },
{ 0x8C38, 0x80 },
{ 0x8C39, 0x18 },
{ 0x8C3A, 0x71 },
{ 0x8C3B, 0x38 },
{ 0x8C3C, 0x2D },
{ 0x8C3D, 0x40 },
{ 0x8C3E, 0x58 },
{ 0x8C3F, 0x2C },
{ 0x8C40, 0x45 },
{ 0x8C41, 0x00 },
{ 0x8C42, 0xA0 },
{ 0x8C43, 0x5A },
{ 0x8C44, 0x00 },
{ 0x8C45, 0x00 },
{ 0x8C46, 0x00 },
{ 0x8C47, 0x1E },
{ 0x8C48, 0x01 },
{ 0x8C49, 0x1D },
{ 0x8C4A, 0x80 },
{ 0x8C4B, 0x18 },
{ 0x8C4C, 0x71 },
{ 0x8C4D, 0x1C },
{ 0x8C4E, 0x16 },
{ 0x8C4F, 0x20 },
{ 0x8C50, 0x58 },
{ 0x8C51, 0x2C },
{ 0x8C52, 0x25 },
{ 0x8C53, 0x00 },
{ 0x8C54, 0xA0 },
{ 0x8C55, 0x5A },
{ 0x8C56, 0x00 },
{ 0x8C57, 0x00 },
{ 0x8C58, 0x00 },
{ 0x8C59, 0x9E },
{ 0x8C5A, 0x00 },
{ 0x8C5B, 0x00 },
{ 0x8C5C, 0x00 },
{ 0x8C5D, 0xFC },
{ 0x8C5E, 0x00 },
{ 0x8C5F, 0x48 },
{ 0x8C60, 0x32 },
{ 0x8C61, 0x43 },
{ 0x8C62, 0x0A },
{ 0x8C63, 0x20 },
{ 0x8C64, 0x20 },
{ 0x8C65, 0x20 },
{ 0x8C66, 0x20 },
{ 0x8C67, 0x20 },
{ 0x8C68, 0x20 },
{ 0x8C69, 0x20 },
{ 0x8C6A, 0x20 },
{ 0x8C6B, 0x20 },
{ 0x8C6C, 0x00 },
{ 0x8C6D, 0x00 },
{ 0x8C6E, 0x00 },
{ 0x8C6F, 0xFD },
{ 0x8C70, 0x00 },
{ 0x8C71, 0x3B },
{ 0x8C72, 0x3D },
{ 0x8C73, 0x1E },
{ 0x8C74, 0x44 },
{ 0x8C75, 0x17 },
{ 0x8C76, 0x00 },
{ 0x8C77, 0x0A },
{ 0x8C78, 0x20 },
{ 0x8C79, 0x20 },
{ 0x8C7A, 0x20 },
{ 0x8C7B, 0x20 },
{ 0x8C7C, 0x20 },
{ 0x8C7D, 0x20 },
{ 0x8C7E, 0x01 },
{ 0x8C7F, 0xD4 },
{ 0x8C80, 0x02 },
{ 0x8C81, 0x03 },
{ 0x8C82, 0x1B },
{ 0x8C83, 0x71 },
{ 0x8C84, 0x46 },
{ 0x8C85, 0xA2 },
{ 0x8C86, 0x20 },
{ 0x8C87, 0x04 },
{ 0x8C88, 0x03 },
{ 0x8C89, 0x20 },
{ 0x8C8A, 0x22 },
{ 0x8C8B, 0x23 },
{ 0x8C8C, 0x09 },
{ 0x8C8D, 0x07 },
{ 0x8C8E, 0x07 },
{ 0x8C8F, 0x83 },
{ 0x8C90, 0x01 },
{ 0x8C91, 0x00 },
{ 0x8C92, 0x00 },
{ 0x8C93, 0x67 },
{ 0x8C94, 0x03 },
{ 0x8C95, 0x0C },
{ 0x8C96, 0x00 },
{ 0x8C97, 0x30 },
{ 0x8C98, 0x00 },
{ 0x8C99, 0xB8 },
{ 0x8C9A, 0x2D },
{ 0x8C9B, 0x01 },
{ 0x8C9C, 0x1D },
{ 0x8C9D, 0x00 },
{ 0x8C9E, 0x72 },
{ 0x8C9F, 0x51 },
{ 0x8CA0, 0xD0 },
{ 0x8CA1, 0x1E },
{ 0x8CA2, 0x20 },
{ 0x8CA3, 0x6E },
{ 0x8CA4, 0x28 },
{ 0x8CA5, 0x55 },
{ 0x8CA6, 0x00 },
{ 0x8CA7, 0xA0 },
{ 0x8CA8, 0x5A },
{ 0x8CA9, 0x00 },
{ 0x8CAA, 0x00 },
{ 0x8CAB, 0x00 },
{ 0x8CAC, 0x1E },
{ 0x8CAD, 0x8C },
{ 0x8CAE, 0x0A },
{ 0x8CAF, 0xD0 },
{ 0x8CB0, 0x8A },
{ 0x8CB1, 0x20 },
{ 0x8CB2, 0xE0 },
{ 0x8CB3, 0x2D },
{ 0x8CB4, 0x10 },
{ 0x8CB5, 0x10 },
{ 0x8CB6, 0x3E },
{ 0x8CB7, 0x96 },
{ 0x8CB8, 0x00 },
{ 0x8CB9, 0xA0 },
{ 0x8CBA, 0x5A },
{ 0x8CBB, 0x00 },
{ 0x8CBC, 0x00 },
{ 0x8CBD, 0x00 },
{ 0x8CBE, 0x18 },
{ 0x8CBF, 0x00 },
{ 0x8CC0, 0x00 },
{ 0x8CC1, 0x00 },
{ 0x8CC2, 0x00 },
{ 0x8CC3, 0x00 },
{ 0x8CC4, 0x00 },
{ 0x8CC5, 0x00 },
{ 0x8CC6, 0x00 },
{ 0x8CC7, 0x00 },
{ 0x8CC8, 0x00 },
{ 0x8CC9, 0x00 },
{ 0x8CCA, 0x00 },
{ 0x8CCB, 0x00 },
{ 0x8CCC, 0x00 },
{ 0x8CCD, 0x00 },
{ 0x8CCE, 0x00 },
{ 0x8CCF, 0x00 },
{ 0x8CD0, 0x00 },
{ 0x8CD1, 0x00 },
{ 0x8CD2, 0x00 },
{ 0x8CD3, 0x00 },
{ 0x8CD4, 0x00 },
{ 0x8CD5, 0x00 },
{ 0x8CD6, 0x00 },
{ 0x8CD7, 0x00 },
{ 0x8CD8, 0x00 },
{ 0x8CD9, 0x00 },
{ 0x8CDA, 0x00 },
{ 0x8CDB, 0x00 },
{ 0x8CDC, 0x00 },
{ 0x8CDD, 0x00 },
{ 0x8CDE, 0x00 },
{ 0x8CDF, 0x00 },
{ 0x8CE0, 0x00 },
{ 0x8CE1, 0x00 },
{ 0x8CE2, 0x00 },
{ 0x8CE3, 0x00 },
{ 0x8CE4, 0x00 },
{ 0x8CE5, 0x00 },
{ 0x8CE6, 0x00 },
{ 0x8CE7, 0x00 },
{ 0x8CE8, 0x00 },
{ 0x8CE9, 0x00 },
{ 0x8CEA, 0x00 },
{ 0x8CEB, 0x00 },
{ 0x8CEC, 0x00 },
{ 0x8CED, 0x00 },
{ 0x8CEE, 0x00 },
{ 0x8CEF, 0x00 },
{ 0x8CF0, 0x00 },
{ 0x8CF1, 0x00 },
{ 0x8CF2, 0x00 },
{ 0x8CF3, 0x00 },
{ 0x8CF4, 0x00 },
{ 0x8CF5, 0x00 },
{ 0x8CF6, 0x00 },
{ 0x8CF7, 0x00 },
{ 0x8CF8, 0x00 },
{ 0x8CF9, 0x00 },
{ 0x8CFA, 0x00 },
{ 0x8CFB, 0x00 },
{ 0x8CFC, 0x00 },
{ 0x8CFD, 0x00 },
{ 0x8CFE, 0x00 },
{ 0x8CFF, 0xC0 },

#endif	
// HDCP 
	H2C_REG_1(0x85d1, 0x01),
	H2C_REG_1(0x8560, 0x24),
	H2C_REG_1(0x8563, 0x11),
	H2C_REG_1(0x8564, 0x0f),
//VIDEO Setting
	H2C_REG_1(0x8573, 0x81),
	H2C_REG_1(0x8571, 0x02),
//AUDIO SET
	H2C_REG_1(0x8600, 0x00),
	H2C_REG_1(0x8602, 0xf3),
	H2C_REG_1(0x8603, 0x02),
	H2C_REG_1(0x8604, 0x0c),
	H2C_REG_1(0x8606, 0x05),
	H2C_REG_1(0x8607, 0x00),
	H2C_REG_1(0x8620, 0x22),
	H2C_REG_1(0x8640, 0x01),
	H2C_REG_1(0x8641, 0x65),
	H2C_REG_1(0x8642, 0x07),
	H2C_REG_1(0x8652, 0x02),
	H2C_REG_1(0x8665, 0x10),
//Info Packet Extraction Operation
	H2C_REG_1(0x8709, 0xff),
	H2C_REG_1(0x870a, 0xff),
	H2C_REG_1(0x870b, 0x2c),
	H2C_REG_1(0x870c, 0x53),
	H2C_REG_1(0x870d, 0x01),
	H2C_REG_1(0x870e, 0x30),
//GBD Extraction Operation
	H2C_REG_1(0x9007, 0x10),
// HDMI Initialization Complete
	H2C_REG_1(0x854a, 0x01),
	H2C_REG_2(0x0004, 0x0cf7),
	{H2C_TABLE_WAIT_MS, 1000 },	{H2C_TABLE_END, 0},
};


static struct h2c_32_reg video_mode_1080p_4lanes[] = {
	H2C_REG_2(0x0004, 0x0000),
// reset H2C
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000 },
// Program CSI PLL
	H2C_REG_2(0x0020, 0x811b),
	H2C_REG_2(0x0022, 0x0213),
	H2C_REG_2(0x0006, 0x01c0),
	{H2C_TABLE_WAIT_MS, 1000 },
	H2C_REG_2(0x0004, 0x8c37),
	H2C_REG_2(0x0014, 0xffff),
	H2C_REG_2(0x7080, 0x0080),
// Program CSI related registers
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
//LineInitCnt = 0x1d00
	H2C_REG_4(0x0210, 0x00002988),
//LPTimeCnt = 0x03
	H2C_REG_4(0x0214, 0x00000005),
//TxClk_Zero[15:8] = 0x11, TxClk_PR[6:0] = 2
	H2C_REG_4(0x0218, 0x00001d04),
//TClk_TrailCnt = 0x00
	H2C_REG_4(0x021c, 0x00000002),
//[14:8] THS_ZEROCNT = 0x00, [6:0] THS_PREPARECNT = 0x03
	H2C_REG_4(0x0220, 0x00000504),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_4(0x0224, 0x00004600),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_4(0x0228, 0x0000000a),
	H2C_REG_4(0x022c, 0x00000004),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_2(0x0206, 0x0000),
	H2C_REG_2(0x0518, 0x0001),
	H2C_REG_2(0x051a, 0x0000),
	H2C_REG_2(0x0500, 0xbe86),
	H2C_REG_2(0x0502, 0xa300),
	//H2C_REG_2(0x0016, 0x05FF),
	H2C_REG_2(0x000a, 0x0f00),
	H2C_REG_2(0x000c, 0x1e1e),
	H2C_REG_2(0x7082, 0x0040),
// Program HDMI related registers
// mask out all int except DDC
	H2C_REG_1(0x8512, 0xfc),
	H2C_REG_1(0x8513, 0xff),
	H2C_REG_1(0x8514, 0xff),
	H2C_REG_1(0x8515, 0xff),
	H2C_REG_1(0x8516, 0xff),
	H2C_REG_1(0x8517, 0xff),
	H2C_REG_1(0x8518, 0xff),
	H2C_REG_1(0x8519, 0xff),
	H2C_REG_1(0x851a, 0xff),
	H2C_REG_1(0x851b, 0xff),
	H2C_REG_1(0x851f, 0xff),
// 27MHz Clock
	H2C_REG_1(0x8531, 0x01),
	H2C_REG_1(0x8540, 0x8c),
	H2C_REG_1(0x8541, 0x0a),
	H2C_REG_1(0x8630, 0xb0),
	H2C_REG_1(0x8631, 0x1e),
	H2C_REG_1(0x8632, 0x04),
	H2C_REG_1(0x8670, 0x01),
	H2C_REG_1(0x8514, 0x00),
	H2C_REG_1(0x8516, 0x00),
// TSBJ suggestion
// HDCP KEY SET
	H2C_REG_1(0x85d1, 0x01),
//PHY Parameter set
	H2C_REG_1(0x8531, 0x03),
	H2C_REG_1(0x8532, 0x80),
	H2C_REG_1(0x8536, 0x40),
	H2C_REG_1(0x853f, 0x0a),
//SYSTEM
	H2C_REG_1(0x8543, 0x32),
// Hot Plug Enable
	H2C_REG_1(0x8544, 0x10),
	H2C_REG_1(0x8545, 0x31),
	H2C_REG_1(0x8546, 0x2d),
//EDID Mode
	H2C_REG_1(0x85c7, 0x01),
	H2C_REG_1(0x85cb, 0x01),
// Write to EDID RAM first block 0x80 byte
	H2C_REG_4(0x8c00, 0xffffff00),
	H2C_REG_4(0x8C04, 0x00ffffff),
	H2C_REG_4(0x8c08, 0x02096252),
	H2C_REG_4(0x8C0C, 0x01010101),
	H2C_REG_4(0x8c10, 0x030114FF),
	H2C_REG_4(0x8C14, 0x785AA080),
	H2C_REG_4(0x8c18, 0xA0C90D0A),
	H2C_REG_4(0x8C1C, 0x27984757),
	H2C_REG_4(0x8c20, 0x2F4C4812),
	H2C_REG_4(0x8C24, 0x808100CF),
	H2C_REG_4(0x8c28, 0x01010101),
	H2C_REG_4(0x8C2C, 0x01010101),
	H2C_REG_4(0x8c30, 0x01010101),
	H2C_REG_4(0x8C34, 0x3A020101),
	H2C_REG_4(0x8c38, 0x38711880),
	H2C_REG_4(0x8C3C, 0x2C58402D),
	H2C_REG_4(0x8c40, 0x84400045),
	H2C_REG_4(0x8C44, 0x1E000063),
	H2C_REG_4(0x8c48, 0xB0502166),
	H2C_REG_4(0x8C4C, 0x301B0051),
	H2C_REG_4(0x8c50, 0x00367040),
	H2C_REG_4(0x8C54, 0x0063843A),
	H2C_REG_4(0x8c58, 0x00001E00),
	H2C_REG_4(0x8C5C, 0x5400FC00),
	H2C_REG_4(0x8c60, 0x4948534F),
	H2C_REG_4(0x8C64, 0x542D4142),
	H2C_REG_4(0x8c68, 0x20200A56),
	H2C_REG_4(0x8C6C, 0xFD000000),
	H2C_REG_4(0x8c70, 0x0F4C1700),
	H2C_REG_4(0x8C74, 0x0A000F51),
	H2C_REG_4(0x8c78, 0x20202020),
	H2C_REG_4(0x8C7C, 0xA9012020),
// Write to EDID RAM second block 0x80 byte
	H2C_REG_4(0x8c80, 0x70250302),
	H2C_REG_4(0x8C84, 0x04051049),
	H2C_REG_4(0x8c88, 0x06020703),
	H2C_REG_4(0x8C8C, 0x09262001),
	H2C_REG_4(0x8c90, 0x07150707),
	H2C_REG_4(0x8C94, 0x0C036CC0),
	H2C_REG_4(0x8c98, 0x38003000),
	H2C_REG_4(0x8C9C, 0x2B2BCF2D),
	H2C_REG_4(0x8ca0, 0x00E23333),
	H2C_REG_4(0x8CA4, 0x801D017F),
	H2C_REG_4(0x8ca8, 0x161C7118),
	H2C_REG_4(0x8CAC, 0x252C5820),
	H2C_REG_4(0x8cb0, 0x63844000),
	H2C_REG_4(0x8CB4, 0x8C9E0000),
	H2C_REG_4(0x8cb8, 0x208AD00A),
	H2C_REG_4(0x8CBC, 0x10102DE0),
	H2C_REG_4(0x8cc0, 0xB000963E),
	H2C_REG_4(0x8CC4, 0x00004384),
	H2C_REG_4(0x8cc8, 0x001F0E18),
	H2C_REG_4(0x8CCC, 0x1E005180),
	H2C_REG_4(0x8cd0, 0x37804030),
	H2C_REG_4(0x8CD4, 0x5384DC00),
	H2C_REG_4(0x8cd8, 0xF11C0000),
	H2C_REG_4(0x8CDC, 0x51A00027),
	H2C_REG_4(0x8ce0, 0x50302500),
	H2C_REG_4(0x8CE4, 0xDC003780),
	H2C_REG_4(0x8ce8, 0x00005384),
	H2C_REG_4(0x8CEC, 0x001AA91C),
	H2C_REG_4(0x8cf0, 0x160050A0),
	H2C_REG_4(0x8CF4, 0x37203030),
	H2C_REG_4(0x8cf8, 0x5384DC00),
	H2C_REG_4(0x8CFC, 0xA21A0000),
// HDCP
	H2C_REG_1(0x85d1, 0x01),
	H2C_REG_1(0x8560, 0x24),
	H2C_REG_1(0x8563, 0x11),
	H2C_REG_1(0x8564, 0x0f),
//VIDEO Setting
	H2C_REG_1(0x8573, 0x81),
	H2C_REG_1(0x8571, 0x02),
//AUDIO SET
	H2C_REG_1(0x8600, 0x00),
	H2C_REG_1(0x8602, 0xf3),
	H2C_REG_1(0x8603, 0x02),
	H2C_REG_1(0x8604, 0x0c),
	H2C_REG_1(0x8606, 0x05),
	H2C_REG_1(0x8607, 0x00),
	H2C_REG_1(0x8620, 0x22),
	H2C_REG_1(0x8630, 0xb0),
	H2C_REG_1(0x8631, 0x1e),
	H2C_REG_1(0x8632, 0x04),
	H2C_REG_1(0x8640, 0x01),
	H2C_REG_1(0x8641, 0x65),
	H2C_REG_1(0x8642, 0x07),
	H2C_REG_1(0x8652, 0x02),
	H2C_REG_1(0x8665, 0x10),
//Info Packet Extraction Operation
	H2C_REG_1(0x8709, 0xff),
	H2C_REG_1(0x870a, 0xff),
	H2C_REG_1(0x870b, 0x2c),
	H2C_REG_1(0x870c, 0x53),
	H2C_REG_1(0x870d, 0x01),
	H2C_REG_1(0x870e, 0x30),
//GBD Extraction Operation
	H2C_REG_1(0x9007, 0x10),
// HDMI Initialization Complete
	H2C_REG_1(0x854a, 0x01),
	H2C_REG_2(0x0004, 0x0cd7),
	{H2C_TABLE_WAIT_MS, 1000 },

	{H2C_TABLE_END, 0 }
};

#ifdef COLORBAR
static struct h2c_32_reg video_mode_1080p_4lanes_colorbar[] = {
// 10.3.2011 - Chris Cheng
//  setup Aardwark to I2C-master at 100kHz
//  this script initializes H2C to take 720p and output 4lane DSI
	H2C_REG_2(0x0004, 0x0000),
// reset H2C
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 100 },
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 1000 },

	H2C_REG_2(0x0006, 0x0000),
	H2C_REG_2(0x0004, 0x0084),
	H2C_REG_2(0x0010, 0x001e),

// Program CSI PLL
//	H2C_REG_2(0x0020, 0x50c7),
//	H2C_REG_2(0x0022, 0x0613),
	H2C_REG_2(0x0020, 0x810b),
	H2C_REG_2(0x0022, 0x0213),
	{H2C_TABLE_WAIT_MS, 1000 },

// Program CSI related registers
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
//LineInitCnt = 0x1d00
	H2C_REG_2(0x0210, 0x2988),
//LPTimeCnt = 0x03
	H2C_REG_2(0x0214, 0x0005),
//TxClk_Zero[15:8] = 0x11, TxClk_PR[6:0] = 2
	H2C_REG_2(0x0218, 0x1d04),
//TClk_TrailCnt = 0x00
	H2C_REG_2(0x021c, 0x0002),
//[14:8] THS_ZEROCNT = 0x00, [6:0] THS_PREPARECNT = 0x03
	H2C_REG_2(0x0220, 0x0504),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0224, 0x4A00),
//TxCLk_PostCnt[10:0] = 0x10
	H2C_REG_2(0x0228, 0x000a),
	H2C_REG_2(0x022c, 0x0004),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_4(0x0204, 0x00000001),
	H2C_REG_4(0x0518, 0x00000001),
	H2C_REG_2(0x0500, 0xa3008086),

// 640x480 colorbar
	H2C_REG_2(0x000A, 0x0f00), //VWcnt
	H2C_REG_2(0x7080, 0x0082), //DbgCtl
// 80 pixel of black
// repeat the following register 80 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(1, 240) },
	H2C_REG_2(0x7000, 0x007f), //DVBBreg
// 80 pixel of blue
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0x00ff), //DVBBreg
	H2C_REG_2(0x7000, 0x0000), //DVBBreg
// 80 pixel of red
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0x0000), //DVBBreg
	H2C_REG_2(0x7000, 0x00ff), //DVBBreg
// 80 pixel of pink
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0x7fff), //DVBBreg
	H2C_REG_2(0x7000, 0x7fff), //DVBBreg
// 80 pixel of green
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0x7f00), //DVBBreg
	H2C_REG_2(0x7000, 0x7f00), //DVBBreg
// 80 pixel of light blue
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0xc0ff), //DVBBreg
	H2C_REG_2(0x7000, 0xc000), //DVBBreg
// 80 pixel of yellow
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0xff00), //DVBBreg
	H2C_REG_2(0x7000, 0xffff), //DVBBreg
// 80 pixel of white
// repeat the following register 40 times
	{H2C_TABLE_REPEAT, H2C_REPEAT(2, 120) },
	H2C_REG_2(0x7000, 0xff7f), //DVBBreg
	H2C_REG_2(0x7000, 0xff7f), //DVBBreg


// Debug Active Video Line Count = 720 (0xcf)
	H2C_REG_2(0x7090, 0x3ef),
// Debug Total Word Count = 2048 (0x800)
	H2C_REG_2(0x7092, 0x0780),
// Debug Control register : Video Word Count Enable, Debug Video Buffer enable, Debug csitx mode enable
	H2C_REG_2(0x7080, 0x0083),

	//H2C_REG_2(0x7082, 0x0040),
	H2C_REG_2(0x0004, 0x0cd7),
	{H2C_TABLE_WAIT_MS, 1000 },
	{H2C_TABLE_END, 0 }
};
#endif


static struct h2c_32_reg yuv_720p_taec[] = {
	H2C_REG_2(0x0002, 0x0b00),
	{H2C_TABLE_WAIT_MS, 500},
	H2C_REG_2(0x0002, 0x0000),
	{H2C_TABLE_WAIT_MS, 200},

	H2C_REG_2(0x0020, 0x4060),
	H2C_REG_2(0x0022, 0x0213),
	{H2C_TABLE_WAIT_MS, 200},
	H2C_REG_2(0x0014, 0xffff),
	H2C_REG_4(0x0140, 0x00000000),
	H2C_REG_4(0x0144, 0x00000000),
	H2C_REG_4(0x0148, 0x00000000),
	H2C_REG_4(0x014c, 0x00000000),
	H2C_REG_4(0x0150, 0x00000000),
	H2C_REG_4(0x0210, 0x00001a00),
	H2C_REG_4(0x0214, 0x00000004),
	H2C_REG_4(0x0218, 0x00001c04),
	H2C_REG_4(0x021c, 0x00000001),
	H2C_REG_4(0x0220, 0x00000303),
	H2C_REG_4(0x0224, 0x00004200),
	H2C_REG_4(0x0228, 0x00000009),
	H2C_REG_4(0x0234, 0x0000001f),
	H2C_REG_4(0x0238, 0x00000001),
	H2C_REG_2(0x0204, 0x0001),
	H2C_REG_2(0x0206, 0x0000),
	H2C_REG_2(0x0518, 0x0001),
	H2C_REG_2(0x051a, 0x0000),
#ifdef COLORBAR_4LANES
	H2C_REG_2(0x0500, 0xbe86),
#else
	H2C_REG_2(0x0500, 0xbe82),
#endif
	H2C_REG_2(0x0502, 0xa300),
//	H2C_REG_2(0x0016, 0x05ff),
	H2C_REG_2(0x000a, 0x0a00),
	H2C_REG_2(0x0006, 0x0020),
	H2C_REG_2(0x0004, 0x0cf6),
	
{ 0x8C00, 0x00 },
{ 0x8C01, 0xFF },
{ 0x8C02, 0xFF },
{ 0x8C03, 0xFF },
{ 0x8C04, 0xFF },
{ 0x8C05, 0xFF },
{ 0x8C06, 0xFF },
{ 0x8C07, 0x00 },
{ 0x8C08, 0x4C },
{ 0x8C09, 0x2D },
{ 0x8C0A, 0x2E },
{ 0x8C0B, 0x03 },
{ 0x8C0C, 0x00 },
{ 0x8C0D, 0x00 },
{ 0x8C0E, 0x00 },
{ 0x8C0F, 0x00 },
{ 0x8C10, 0x19 },
{ 0x8C11, 0x11 },
{ 0x8C12, 0x01 },
{ 0x8C13, 0x03 },
{ 0x8C14, 0x80 },
{ 0x8C15, 0x10 },
{ 0x8C16, 0x09 },
{ 0x8C17, 0x78 },
{ 0x8C18, 0x0A },
{ 0x8C19, 0xAE },
{ 0x8C1A, 0xA1 },
{ 0x8C1B, 0xA6 },
{ 0x8C1C, 0x54 },
{ 0x8C1D, 0x4C },
{ 0x8C1E, 0x99 },
{ 0x8C1F, 0x26 },
{ 0x8C20, 0x14 },
{ 0x8C21, 0x50 },
{ 0x8C22, 0x54 },
{ 0x8C23, 0x20 },
{ 0x8C24, 0x00 },
{ 0x8C25, 0x00 },
{ 0x8C26, 0x01 },
{ 0x8C27, 0x01 },
{ 0x8C28, 0x01 },
{ 0x8C29, 0x01 },
{ 0x8C2A, 0x01 },
{ 0x8C2B, 0x01 },
{ 0x8C2C, 0x01 },
{ 0x8C2D, 0x01 },
{ 0x8C2E, 0x01 },
{ 0x8C2F, 0x01 },
{ 0x8C30, 0x01 },
{ 0x8C31, 0x01 },
{ 0x8C32, 0x01 },
{ 0x8C33, 0x01 },
{ 0x8C34, 0x01 },
{ 0x8C35, 0x01 },
{ 0x8C36, 0x01 },
{ 0x8C37, 0x1D },
{ 0x8C38, 0x00 },
{ 0x8C39, 0x72 },
{ 0x8C3A, 0x51 },
{ 0x8C3B, 0xD0 },
{ 0x8C3C, 0x1E },
{ 0x8C3D, 0x20 },
{ 0x8C3E, 0x6E },
{ 0x8C3F, 0x2C },
{ 0x8C40, 0x55 },
{ 0x8C41, 0x00 },
{ 0x8C42, 0xA0 },
{ 0x8C43, 0x05 },
{ 0x8C44, 0x00 },
{ 0x8C45, 0x00 },
{ 0x8C46, 0x00 },
{ 0x8C47, 0x1E },
{ 0x8C48, 0x01 },
{ 0x8C49, 0x1D },
{ 0x8C4A, 0x80 },
{ 0x8C4B, 0x18 },
{ 0x8C4C, 0x71 },
{ 0x8C4D, 0x1C },
{ 0x8C4E, 0x16 },
{ 0x8C4F, 0x20 },
{ 0x8C50, 0x58 },
{ 0x8C51, 0x2C },
{ 0x8C52, 0x25 },
{ 0x8C53, 0x00 },
{ 0x8C54, 0xA0 },
{ 0x8C55, 0x5A },
{ 0x8C56, 0x00 },
{ 0x8C57, 0x00 },
{ 0x8C58, 0x00 },
{ 0x8C59, 0x9E },
{ 0x8C5A, 0x00 },
{ 0x8C5B, 0x00 },
{ 0x8C5C, 0x00 },
{ 0x8C5D, 0xFC },
{ 0x8C5E, 0x00 },
{ 0x8C5F, 0x48 },
{ 0x8C60, 0x32 },
{ 0x8C61, 0x43 },
{ 0x8C62, 0x0A },
{ 0x8C63, 0x20 },
{ 0x8C64, 0x20 },
{ 0x8C65, 0x20 },
{ 0x8C66, 0x20 },
{ 0x8C67, 0x20 },
{ 0x8C68, 0x20 },
{ 0x8C69, 0x20 },
{ 0x8C6A, 0x20 },
{ 0x8C6B, 0x20 },
{ 0x8C6C, 0x00 },
{ 0x8C6D, 0x00 },
{ 0x8C6E, 0x00 },
{ 0x8C6F, 0xFD },
{ 0x8C70, 0x00 },
{ 0x8C71, 0x3B },
{ 0x8C72, 0x3D },
{ 0x8C73, 0x1E },
{ 0x8C74, 0x44 },
{ 0x8C75, 0x17 },
{ 0x8C76, 0x00 },
{ 0x8C77, 0x0A },
{ 0x8C78, 0x20 },
{ 0x8C79, 0x20 },
{ 0x8C7A, 0x20 },
{ 0x8C7B, 0x20 },
{ 0x8C7C, 0x20 },
{ 0x8C7D, 0x20 },
{ 0x8C7E, 0x01 },
{ 0x8C7F, 0xE0 },
{ 0x8C80, 0x02 },
{ 0x8C81, 0x03 },
{ 0x8C82, 0x1B },
{ 0x8C83, 0x71 },
{ 0x8C84, 0x46 },
{ 0x8C85, 0x22 },
{ 0x8C86, 0x20 },
{ 0x8C87, 0x84 },
{ 0x8C88, 0x03 },
{ 0x8C89, 0x20 },
{ 0x8C8A, 0x22 },
{ 0x8C8B, 0x23 },
{ 0x8C8C, 0x09 },
{ 0x8C8D, 0x07 },
{ 0x8C8E, 0x07 },
{ 0x8C8F, 0x83 },
{ 0x8C90, 0x01 },
{ 0x8C91, 0x00 },
{ 0x8C92, 0x00 },
{ 0x8C93, 0x67 },
{ 0x8C94, 0x03 },
{ 0x8C95, 0x0C },
{ 0x8C96, 0x00 },
{ 0x8C97, 0x30 },
{ 0x8C98, 0x00 },
{ 0x8C99, 0xB8 },
{ 0x8C9A, 0x2D },
{ 0x8C9B, 0x01 },
{ 0x8C9C, 0x1D },
{ 0x8C9D, 0x00 },
{ 0x8C9E, 0x72 },
{ 0x8C9F, 0x51 },
{ 0x8CA0, 0xD0 },
{ 0x8CA1, 0x1E },
{ 0x8CA2, 0x20 },
{ 0x8CA3, 0x6E },
{ 0x8CA4, 0x28 },
{ 0x8CA5, 0x55 },
{ 0x8CA6, 0x00 },
{ 0x8CA7, 0xA0 },
{ 0x8CA8, 0x5A },
{ 0x8CA9, 0x00 },
{ 0x8CAA, 0x00 },
{ 0x8CAB, 0x00 },
{ 0x8CAC, 0x1E },
{ 0x8CAD, 0x8C },
{ 0x8CAE, 0x0A },
{ 0x8CAF, 0xD0 },
{ 0x8CB0, 0x8A },
{ 0x8CB1, 0x20 },
{ 0x8CB2, 0xE0 },
{ 0x8CB3, 0x2D },
{ 0x8CB4, 0x10 },
{ 0x8CB5, 0x10 },
{ 0x8CB6, 0x3E },
{ 0x8CB7, 0x96 },
{ 0x8CB8, 0x00 },
{ 0x8CB9, 0xA0 },
{ 0x8CBA, 0x5A },
{ 0x8CBB, 0x00 },
{ 0x8CBC, 0x00 },
{ 0x8CBD, 0x00 },
{ 0x8CBE, 0x18 },
{ 0x8CBF, 0x00 },
{ 0x8CC0, 0x00 },
{ 0x8CC1, 0x00 },
{ 0x8CC2, 0x00 },
{ 0x8CC3, 0x00 },
{ 0x8CC4, 0x00 },
{ 0x8CC5, 0x00 },
{ 0x8CC6, 0x00 },
{ 0x8CC7, 0x00 },
{ 0x8CC8, 0x00 },
{ 0x8CC9, 0x00 },
{ 0x8CCA, 0x00 },
{ 0x8CCB, 0x00 },
{ 0x8CCC, 0x00 },
{ 0x8CCD, 0x00 },
{ 0x8CCE, 0x00 },
{ 0x8CCF, 0x00 },
{ 0x8CD0, 0x00 },
{ 0x8CD1, 0x00 },
{ 0x8CD2, 0x00 },
{ 0x8CD3, 0x00 },
{ 0x8CD4, 0x00 },
{ 0x8CD5, 0x00 },
{ 0x8CD6, 0x00 },
{ 0x8CD7, 0x00 },
{ 0x8CD8, 0x00 },
{ 0x8CD9, 0x00 },
{ 0x8CDA, 0x00 },
{ 0x8CDB, 0x00 },
{ 0x8CDC, 0x00 },
{ 0x8CDD, 0x00 },
{ 0x8CDE, 0x00 },
{ 0x8CDF, 0x00 },
{ 0x8CE0, 0x00 },
{ 0x8CE1, 0x00 },
{ 0x8CE2, 0x00 },
{ 0x8CE3, 0x00 },
{ 0x8CE4, 0x00 },
{ 0x8CE5, 0x00 },
{ 0x8CE6, 0x00 },
{ 0x8CE7, 0x00 },
{ 0x8CE8, 0x00 },
{ 0x8CE9, 0x00 },
{ 0x8CEA, 0x00 },
{ 0x8CEB, 0x00 },
{ 0x8CEC, 0x00 },
{ 0x8CED, 0x00 },
{ 0x8CEE, 0x00 },
{ 0x8CEF, 0x00 },
{ 0x8CF0, 0x00 },
{ 0x8CF1, 0x00 },
{ 0x8CF2, 0x00 },
{ 0x8CF3, 0x00 },
{ 0x8CF4, 0x00 },
{ 0x8CF5, 0x00 },
{ 0x8CF6, 0x00 },
{ 0x8CF7, 0x00 },
{ 0x8CF8, 0x00 },
{ 0x8CF9, 0x00 },
{ 0x8CFA, 0x00 },
{ 0x8CFB, 0x00 },
{ 0x8CFC, 0x00 },
{ 0x8CFD, 0x00 },
{ 0x8CFE, 0x00 },
{ 0x8CFF, 0xC0 },
	
	#if 0
	H2C_REG_4(0x8c00, 0xffffff00),
	H2C_REG_4(0x8C04, 0x00ffffff),
	H2C_REG_4(0x8c08, 0x88886252),
	H2C_REG_4(0x8C0C, 0x00000000),
	H2C_REG_4(0x8c10, 0x0301151c),
	H2C_REG_4(0x8C14, 0x78000080),
	H2C_REG_4(0x8c18, 0xA3FFDA0A),
	H2C_REG_4(0x8C1C, 0x29A24A58),
	H2C_REG_4(0x8c20, 0x004B4917),
	H2C_REG_4(0x8C24, 0x01010000),
	H2C_REG_4(0x8c28, 0x01010101),
	H2C_REG_4(0x8C2C, 0x01010101),
	H2C_REG_4(0x8c30, 0x01010101),
	H2C_REG_4(0x8C34, 0x3a020101),
	H2C_REG_4(0x8c38, 0x38711880),
	H2C_REG_4(0x8C3C, 0x2c58402d),
	H2C_REG_4(0x8c40, 0x8EC40045),
	H2C_REG_4(0x8C44, 0x1E000021),
	H2C_REG_4(0x8c48, 0x72001d01),
	H2C_REG_4(0x8C4C, 0x201ed051),
	H2C_REG_4(0x8c50, 0x0055286e),
	H2C_REG_4(0x8C54, 0x00218Ec4),
	H2C_REG_4(0x8c58, 0x00001E00),
	H2C_REG_4(0x8C5C, 0x5400FC00),
	H2C_REG_4(0x8c60, 0x6968736F),
	H2C_REG_4(0x8C64, 0x482D6162),
	H2C_REG_4(0x8c68, 0x0a0A4332),
	H2C_REG_4(0x8C6C, 0xFD000000),
	H2C_REG_4(0x8c70, 0x0F3D1700),
	H2C_REG_4(0x8C74, 0x0A00178C),
	H2C_REG_4(0x8c78, 0x20202020),
	H2C_REG_4(0x8C7C, 0x26012020),
	H2C_REG_4(0x8c80, 0x74170302),
	H2C_REG_4(0x8C84, 0x03138447),
	H2C_REG_4(0x8c88, 0x01060702),
	H2C_REG_4(0x8C8C, 0x01040923),
	H2C_REG_4(0x8c90, 0x000C0366),
	H2C_REG_4(0x8C94, 0x8C800030),
	H2C_REG_4(0x8c98, 0x208AD00A),
	H2C_REG_4(0x8C9C, 0x10102DE0),
	H2C_REG_4(0x8ca0, 0xC400963E),
	H2C_REG_4(0x8CA4, 0x0000218E),
	H2C_REG_4(0x8ca8, 0xD00A8C18),
	H2C_REG_4(0x8CAC, 0x2DE0208A),
	H2C_REG_4(0x8cb0, 0x963E1010),
	H2C_REG_4(0x8CB4, 0x218E1300),
	H2C_REG_4(0x8cb8, 0x8C180000),
	H2C_REG_4(0x8CBC, 0x5114A00A),
	H2C_REG_4(0x8cc0, 0x260016F0),
	H2C_REG_4(0x8CC4, 0xC400437C),
	H2C_REG_4(0x8cc8, 0x0000218E),
	H2C_REG_4(0x8CCC, 0xA00A8C98),
	H2C_REG_4(0x8cd0, 0x16F05114),
	H2C_REG_4(0x8CD4, 0x437C2600),
	H2C_REG_4(0x8cd8, 0x218E1300),
	H2C_REG_4(0x8CDC, 0x00980000),
	H2C_REG_4(0x8ce0, 0x00000000),
	H2C_REG_4(0x8CE4, 0x00000000),
	H2C_REG_4(0x8ce8, 0x00000000),
	H2C_REG_4(0x8CEC, 0x00000000),
	H2C_REG_4(0x8cf0, 0x00000000),
	H2C_REG_4(0x8CF4, 0x00000000),
	H2C_REG_4(0x8cf8, 0x00000000),
	H2C_REG_4(0x8CFC, 0x31000000),
	#endif

	H2C_REG_1(0x8502, 0x01), //SYS_INT - clear DDC
	H2C_REG_1(0x8512, 0xfc), // SYS_INT_MASK - allow DDC
	H2C_REG_1(0x8514, 0x00), // PACKET_INTM - allow all
	H2C_REG_1(0x8515, 0x00), // CBIT_INTM - allow all
	H2C_REG_1(0x8516, 0x00), // AUDIO_INTM - allow all
	H2C_REG_1(0x8531, 0x01), // PHY_CTL - enable DDCV5 detection
	H2C_REG_1(0x8540, 0x8c), // SYS_FREQ - 27MHz
	H2C_REG_1(0x8541, 0x0a), // SYS_FREQ - 27MHz
	H2C_REG_1(0x8630, 0xb0), // AUDIO_FS lockdetect ctl for 27 Mhz
	H2C_REG_1(0x8631, 0x1e), // ---
	H2C_REG_1(0x8632, 0x04), // ---
	H2C_REG_1(0x8670, 0x01), // AUDIO_PLL - 27 MHz
	H2C_REG_1(0x8532, 0x80), // ??
	H2C_REG_1(0x8536, 0x40), // ??
	H2C_REG_1(0x853f, 0x0a), // ??
	H2C_REG_1(0x8543, 0x34), // DDC_CTL - ddc listen always
	H2C_REG_1(0x8544, 0x10), // HPD_CTL - enable HPD
	H2C_REG_1(0x8545, 0x31), // Audio PLL
	H2C_REG_1(0x8546, 0x2d), // AVMUTE t/o 4.5s
	H2C_REG_1(0x85c7, 0x01), // EDID MODE - internal
	H2C_REG_1(0x85cb, 0x01), // EDID LEN - 256
	H2C_REG_1(0x85cc, 0x00), // EDID LEN - 256
	H2C_REG_1(0x85d1, 0x01), // ??
	H2C_REG_1(0x8560, 0x24), // HDCP_MODE - auto rst
	H2C_REG_1(0x8563, 0x11), // ??
	H2C_REG_1(0x8564, 0x0f), // ??
	H2C_REG_1(0x8573, 0x81), //VOUT_SET2 - 422 output RGB->YUV
	H2C_REG_1(0x8600, 0x00), // FORCE_MUTE - off
	H2C_REG_1(0x8602, 0xf3), // AUTO_MUTE
	H2C_REG_1(0x8603, 0x02), // AUTOMUTE2
	H2C_REG_1(0x8604, 0x0C), // AUTOPLAY - on
	H2C_REG_1(0x8606, 0x05), // BUFINIT_START - 500 ms
	H2C_REG_1(0x8607, 0x00), // FS_MUTE - off
	H2C_REG_1(0x8620, 0x22), // FS_IMODE
	H2C_REG_1(0x8640, 0x01), // ACR_MODE - hw flow control
	H2C_REG_1(0x8641, 0x65), // ACR_MDF0
	H2C_REG_1(0x8642, 0x07), // ACR_MDF1
	H2C_REG_1(0x8652, 0x02), // SDO_MODE - 16 bit I2S
	H2C_REG_1(0x8665, 0x10), // ??
	H2C_REG_1(0x8709, 0xFF), // PK_INT_MODE - all
	H2C_REG_1(0x870B, 0x2C), // NO_PK_LIMIT
	H2C_REG_1(0x870C, 0x53), //
	H2C_REG_1(0x870D, 0x01),
	H2C_REG_1(0x870E, 0x30),
	H2C_REG_1(0x9007, 0x10),
	H2C_REG_1(0x854A, 0x01), // INIT_END
	H2C_REG_1(0x8531, 0x00), // PHY_CTL0 - 27 MHz, phy power manual
#if 1
//	H2C_REG_1(0x8630, 0xa0),
//	H2C_REG_1(0x8631, 0xf7),
//	H2C_REG_1(0x8632, 0x03),
//	H2C_REG_1(0x8670, 0x02),
//	H2C_REG_1(0x8670, 0x02),
	H2C_REG_1(0x8671, 0x4b),
	H2C_REG_1(0x8672, 0x11),
	H2C_REG_1(0x8673, 0xa4),
	H2C_REG_1(0x8674, 0x03),
	H2C_REG_1(0x8675, 0x4a),
	H2C_REG_1(0x8676, 0x56),
	H2C_REG_1(0x8677, 0x58),
	H2C_REG_1(0x8678, 0x03),
	H2C_REG_1(0x8571, 0x02),
#endif
	H2C_REG_2(0x0004, 0x0cf7),

	{H2C_TABLE_END, 0},
};


